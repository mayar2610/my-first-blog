<scope doc="Extensions to the 'distutils' for large or complex&#10;distributions" ilk="blob" lang="Python" name="__init__" src="C:\Python34\lib\site-packages\setuptools\__init__.py"><import line="3" module="os" /><import line="4" module="distutils.core" /><import line="5" module="distutils.filelist" /><import alias="_Command" line="6" module="distutils.core" symbol="Command" /><import line="7" module="distutils.util" symbol="convert_path" /><import line="8" module="fnmatch" symbol="fnmatchcase" /><import line="10" module="setuptools.version" /><import line="11" module="setuptools.extension" symbol="Extension" /><import line="12" module="setuptools.dist" symbol="Distribution" /><import line="12" module="setuptools.dist" symbol="Feature" /><import line="12" module="setuptools.dist" symbol="_get_unpatched" /><import line="13" module="setuptools.depends" symbol="Require" /><import line="14" module="setuptools.compat" symbol="filterfalse" /><variable citdl="list" line="16" name="__all__" /><variable citdl="setuptools.version.__version__" line="21" name="__version__" /><variable line="23" name="bootstrap_install_from" /><variable citdl="True" line="27" name="run_2to3_on_doctests" /><variable citdl="list" line="29" name="lib2to3_fixer_packages" /><scope classrefs="object" ilk="class" line="32" lineend="98" name="PackageFinder"><scope attributes="__classmethod__" doc="Return a list all Python packages found within directory 'where'&#10;&#10;'where' should be supplied as a &quot;cross-platform&quot; (i.e. URL-style)&#10;path; it will be converted to the appropriate local path syntax.&#10;'exclude' is a sequence of package names to exclude; '*' can be used&#10;as a wildcard in the names, such that 'foo.*' will exclude all&#10;subpackages of 'foo' (but not 'foo' itself).&#10;&#10;'include' is a sequence of package names to include.  If it's&#10;specified, only the named packages will be included.  If it's not&#10;specified, all found packages will be included.  'include' can contain&#10;shell style wildcard patterns just like 'exclude'.&#10;&#10;The list of included packages is built up first and then any&#10;explicitly excluded packages are removed from it." ilk="function" line="33" lineend="33" name="find" returns="list()" signature="find(where='.', exclude=(), include=('*')) - classmethod"><variable citdl="PackageFinder" ilk="argument" line="33" name="cls" /><variable citdl="str" ilk="argument" line="33" name="where" /><variable citdl="tuple" ilk="argument" line="33" name="exclude" /><variable citdl="tuple" ilk="argument" line="33" name="include" /><variable citdl="cls._find_packages_iter()" line="51" name="out" /><variable citdl="cls._build_filter()" line="53" name="includes" /><variable citdl="cls._build_filter()" line="54" name="excludes" /></scope><scope attributes="__staticmethod__" doc="Exclude any apparent package that apparently doesn't include its&#10;parent.&#10;&#10;For example, exclude 'foo.bar' if 'foo' is not present." ilk="function" line="59" lineend="59" name="require_parents" signature="require_parents(packages) - staticmethod"><variable citdl="PackageFinder" ilk="argument" line="59" name="packages" /><variable citdl="list" line="67" name="found" /><variable line="68" name="pkg" /><variable line="69" name="base" /><variable line="69" name="sep" /><variable line="69" name="child" /></scope><scope attributes="protected __staticmethod__" doc="Return all dirs in base_path, relative to base_path" ilk="function" line="75" lineend="75" name="_all_dirs" signature="_all_dirs(base_path) - staticmethod"><variable citdl="PackageFinder" ilk="argument" line="75" name="base_path" /><variable line="80" name="files" /><variable line="80" name="root" /><variable line="80" name="dirs" /><variable line="81" name="dir" /></scope><scope attributes="protected __classmethod__" ilk="function" line="84" lineend="84" name="_find_packages_iter" signature="_find_packages_iter(base_path) - classmethod"><variable citdl="PackageFinder" ilk="argument" line="84" name="cls" /><variable ilk="argument" line="84" name="base_path" /><variable citdl="_all_dirs()" line="86" name="dirs" /><variable citdl="filterfalse()" line="87" name="suitable" /></scope><scope attributes="protected __staticmethod__" ilk="function" line="94" lineend="94" name="_looks_like_package" returns="os.path.isfile()" signature="_looks_like_package(path) - staticmethod"><variable citdl="PackageFinder" ilk="argument" line="94" name="path" /></scope><scope attributes="protected __staticmethod__" doc="Given a list of patterns, return a callable that will be true only if&#10;the input matches one of the patterns." ilk="function" line="98" lineend="98" name="_build_filter" signature="_build_filter() - staticmethod" /></scope><scope classrefs="PackageFinder" ilk="class" line="106" lineend="107" name="PEP420PackageFinder"><scope attributes="protected __staticmethod__" ilk="function" line="107" lineend="107" name="_looks_like_package" returns="bool" signature="_looks_like_package(path) - staticmethod"><variable citdl="PEP420PackageFinder" ilk="argument" line="107" name="path" /></scope></scope><variable citdl="PackageFinder.find" line="111" name="find_packages" /><variable citdl="distutils.core.setup" line="113" name="setup" /><variable attributes="protected" citdl="_get_unpatched()" line="115" name="_Command" /><scope classrefs="_get_unpatched()" ilk="class" line="117" lineend="132" name="Command"><variable citdl="_Command.__doc__" line="118" name="__doc__" /><variable citdl="False" line="120" name="command_consumes_arguments" /><scope attributes="__ctor__" ilk="function" line="122" lineend="126" name="__init__" signature="Command(**dist)"><variable citdl="Command" ilk="argument" line="122" name="self" /><variable attributes="kwargs" ilk="argument" line="122" name="dist" /><variable line="125" name="k" /><variable line="125" name="v" /></scope><scope ilk="function" line="128" lineend="132" name="reinitialize_command" returns="_Command.reinitialize_command()" signature="reinitialize_command(command=0, **reinit_subcommands)"><variable citdl="Command" ilk="argument" line="128" name="self" /><variable citdl="int" ilk="argument" line="128" name="command" /><variable attributes="kwargs" ilk="argument" line="128" name="reinit_subcommands" /><variable citdl="_Command.reinitialize_command()" line="129" name="cmd" /><variable line="130" name="k" /><variable line="130" name="v" /></scope></scope><scope doc="Find all files under 'dir' and return the list of full filenames&#10;(relative to 'dir')." ilk="function" line="136" lineend="147" name="findall" returns="list" signature="findall(dir=os.curdir)"><variable citdl="os.curdir" ilk="argument" line="136" name="dir" /><variable citdl="list" line="140" name="all_files" /><variable citdl="list" line="141" name="files" /><variable line="141" name="base" /><variable line="141" name="dirs" /></scope></scope>