<scope doc="Package resource API --------------------" ilk="blob" lang="Python" name="__init__" src="C:\Python34\lib\site-packages\pkg_resources\__init__.py"><import line="17" module="__future__" symbol="absolute_import" /><import line="19" module="sys" /><import line="20" module="os" /><import line="21" module="io" /><import line="22" module="time" /><import line="23" module="re" /><import line="24" module="imp" /><import line="25" module="zipfile" /><import line="26" module="zipimport" /><import line="27" module="warnings" /><import line="28" module="stat" /><import line="29" module="functools" /><import line="30" module="pkgutil" /><import line="31" module="token" /><import line="32" module="symbol" /><import line="33" module="operator" /><import line="34" module="platform" /><import line="35" module="collections" /><import line="36" module="plistlib" /><import line="37" module="email.parser" /><import line="38" module="tempfile" /><import line="39" module="pkgutil" symbol="get_importer" /><import line="45" module="urllib.parse" symbol="urlparse" /><import line="45" module="urllib.parse" symbol="urlunparse" /><import line="48" module="urlparse" symbol="urlparse" /><import line="48" module="urlparse" symbol="urlunparse" /><import line="58" module="os" symbol="utime" /><import line="60" module="os" symbol="mkdir" /><import line="60" module="os" symbol="rename" /><import line="60" module="os" symbol="unlink" /><import alias="os_open" line="66" module="os" symbol="open" /><import line="67" module="os.path" symbol="isdir" /><import line="67" module="os.path" symbol="split" /><import alias="importlib_bootstrap" line="71" module="importlib._bootstrap" /><import line="76" module="parser" /><import line="81" module="pkg_resources._vendor.packaging.version" /><import line="82" module="pkg_resources._vendor.packaging.specifiers" /><import line="87" module="packaging.version" /><import line="88" module="packaging.specifiers" /><variable citdl="bool" line="41" name="PY3" /><variable citdl="bool" line="42" name="PY2" /><variable citdl="tuple" line="51" name="string_types" /><variable line="55" name="iteritems" /><variable citdl="False" line="61" name="WRITE_SUPPORT" /><variable line="73" name="importlib_bootstrap" /><variable citdl="pkg_resources._vendor.packaging" line="83" name="packaging" /><scope classrefs="RuntimeWarning" doc="Used when there is an issue with a version or specifier not complying with&#10;PEP 440." ilk="class" line="91" lineend="95" name="PEP440Warning" /><scope attributes="protected" classrefs="object" ilk="class" line="98" lineend="192" name="_SetuptoolsVersionMixin"><scope ilk="function" line="100" lineend="101" name="__hash__" signature="__hash__()"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="100" name="self" /></scope><scope ilk="function" line="103" lineend="107" name="__lt__" returns="bool" signature="__lt__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="103" name="self" /><variable ilk="argument" line="103" name="other" /></scope><scope ilk="function" line="109" lineend="113" name="__le__" returns="bool" signature="__le__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="109" name="self" /><variable ilk="argument" line="109" name="other" /></scope><scope ilk="function" line="115" lineend="119" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="115" name="self" /><variable ilk="argument" line="115" name="other" /></scope><scope ilk="function" line="121" lineend="125" name="__ge__" returns="bool" signature="__ge__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="121" name="self" /><variable ilk="argument" line="121" name="other" /></scope><scope ilk="function" line="127" lineend="131" name="__gt__" returns="bool" signature="__gt__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="127" name="self" /><variable ilk="argument" line="127" name="other" /></scope><scope ilk="function" line="133" lineend="137" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="133" name="self" /><variable ilk="argument" line="133" name="other" /></scope><scope ilk="function" line="139" lineend="140" name="__getitem__" signature="__getitem__(key)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="139" name="self" /><variable ilk="argument" line="139" name="key" /></scope><scope ilk="function" line="142" lineend="192" name="__iter__" signature="__iter__()"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="142" name="self" /><variable citdl="re.compile()" line="143" name="component_re" /><variable citdl="{}.get" line="144" name="replace" /><scope attributes="protected" ilk="function" line="152" lineend="164" name="_parse_version_parts" signature="_parse_version_parts(s)"><variable ilk="argument" line="152" name="s" /><variable citdl="replace()" line="153" name="part" /></scope><scope ilk="function" line="166" lineend="178" name="old_parse_version" returns="tuple()" signature="old_parse_version(s)"><variable ilk="argument" line="166" name="s" /><variable citdl="list" line="167" name="parts" /><variable line="168" name="part" /></scope><variable line="191" name="part" /></scope></scope><scope classrefs="_SetuptoolsVersionMixin packaging.version.Version" ilk="class" line="195" lineend="196" name="SetuptoolsVersion" /><scope classrefs="_SetuptoolsVersionMixin packaging.version.LegacyVersion" ilk="class" line="199" lineend="201" name="SetuptoolsLegacyVersion" /><scope ilk="function" line="204" lineend="208" name="parse_version" returns="SetuptoolsLegacyVersion" signature="parse_version(v)"><variable ilk="argument" line="204" name="v" /></scope><variable attributes="protected" citdl="dict" line="211" name="_state_vars" /><scope attributes="protected" ilk="function" line="213" lineend="215" name="_declare_state" signature="_declare_state(**vartype)"><variable attributes="kwargs" ilk="argument" line="213" name="vartype" /></scope><scope ilk="function" line="217" lineend="222" name="__getstate__" returns="dict" signature="__getstate__()"><variable citdl="dict" line="218" name="state" /><variable citdl="globals()" line="219" name="g" /><variable line="220" name="k" /><variable line="220" name="v" /></scope><scope ilk="function" line="224" lineend="228" name="__setstate__" signature="__setstate__(state)"><variable ilk="argument" line="224" name="state" /><variable citdl="globals()" line="225" name="g" /><variable line="226" name="k" /><variable line="226" name="v" /></scope><scope attributes="protected" ilk="function" line="230" lineend="231" name="_sget_dict" returns="val.copy()" signature="_sget_dict(val)"><variable ilk="argument" line="230" name="val" /></scope><scope attributes="protected" ilk="function" line="233" lineend="235" name="_sset_dict" signature="_sset_dict(key, ob, state)"><variable ilk="argument" line="233" name="key" /><variable ilk="argument" line="233" name="ob" /><variable ilk="argument" line="233" name="state" /></scope><scope attributes="protected" ilk="function" line="237" lineend="238" name="_sget_object" returns="val.__getstate__()" signature="_sget_object(val)"><variable ilk="argument" line="237" name="val" /></scope><scope attributes="protected" ilk="function" line="240" lineend="241" name="_sset_object" signature="_sset_object(key, ob, state)"><variable ilk="argument" line="240" name="key" /><variable ilk="argument" line="240" name="ob" /><variable ilk="argument" line="240" name="state" /></scope><variable attributes="protected" line="243" name="_sget_none" /><scope doc="Return this platform's maximum compatible version.&#10;&#10;distutils.util.get_platform() normally reports the minimum version&#10;of Mac OS X that would be required to *use* extensions produced by&#10;distutils.  But what we want when checking compatibility is to know the&#10;version of Mac OS X that we are *running*.  To allow usage of packages that&#10;explicitly require a newer version of Mac OS X, we must also know the&#10;current version of the OS.&#10;&#10;If this condition occurs for any other platform with a version in its&#10;platform strings, this function should be extended accordingly." ilk="function" line="246" lineend="267" name="get_supported_platform" returns="get_build_platform()" signature="get_supported_platform()"><variable citdl="get_build_platform()" line="259" name="plat" /><variable citdl="macosVersionString.match()" line="260" name="m" /></scope><variable citdl="list" line="269" name="__all__" /><scope classrefs="Exception" doc="Abstract base for dependency resolution errors" ilk="class" line="315" lineend="318" name="ResolutionError"><scope ilk="function" line="317" lineend="318" name="__repr__" signature="__repr__()"><variable citdl="ResolutionError" ilk="argument" line="317" name="self" /></scope></scope><scope classrefs="ResolutionError" doc="An already-installed version conflicts with the requested version.&#10;&#10;Should be initialized with the installed Distribution and the requested&#10;Requirement." ilk="class" line="321" lineend="350" name="VersionConflict"><variable attributes="protected" citdl="str" line="329" name="_template" /><variable attributes="property" line="331" name="dist" /><scope attributes="__hidden__" ilk="function" line="331" lineend="331" name="dist (property getter)" signature="dist (property getter)()"><variable citdl="VersionConflict" ilk="argument" line="331" name="self" /></scope><variable attributes="property" line="335" name="req" /><scope attributes="__hidden__" ilk="function" line="335" lineend="335" name="req (property getter)" signature="req (property getter)()"><variable citdl="VersionConflict" ilk="argument" line="335" name="self" /></scope><scope ilk="function" line="339" lineend="340" name="report" returns="self._template.format()" signature="report()"><variable citdl="VersionConflict" ilk="argument" line="339" name="self" /></scope><scope doc="If required_by is non-empty, return a version of self that is a&#10;ContextualVersionConflict." ilk="function" line="342" lineend="350" name="with_context" returns="ContextualVersionConflict()" signature="with_context(required_by)"><variable citdl="VersionConflict" ilk="argument" line="342" name="self" /><variable ilk="argument" line="342" name="required_by" /><variable line="349" name="args" /></scope></scope><scope classrefs="VersionConflict" doc="A VersionConflict that accepts a third parameter, the set of the&#10;requirements that required the installed Distribution." ilk="class" line="353" lineend="361" name="ContextualVersionConflict"><variable attributes="protected" line="359" name="_template" /><scope attributes="__hidden__" ilk="function" line="361" lineend="361" name="required_by (property getter)" signature="required_by (property getter)()"><variable citdl="ContextualVersionConflict" ilk="argument" line="361" name="self" /></scope><variable attributes="property" line="361" name="required_by" /></scope><scope classrefs="ResolutionError" doc="A requested distribution was not found" ilk="class" line="366" lineend="367" name="DistributionNotFound" /><scope classrefs="ResolutionError" doc="Distribution doesn't have an &quot;extra feature&quot; of the given name" ilk="class" line="369" lineend="370" name="UnknownExtra" /><variable attributes="protected" citdl="dict" line="371" name="_provider_factories" /><variable line="373" name="PY_MAJOR" /><variable citdl="int" line="374" name="EGG_DIST" /><variable citdl="int" line="375" name="BINARY_DIST" /><variable citdl="int" line="376" name="SOURCE_DIST" /><variable citdl="int" line="377" name="CHECKOUT_DIST" /><variable citdl="int" line="378" name="DEVELOP_DIST" /><scope doc="Register `provider_factory` to make providers for `loader_type`&#10;&#10;`loader_type` is the type or class of a PEP 302 ``module.__loader__``,&#10;and `provider_factory` is a function that, passed a *module* object,&#10;returns an ``IResourceProvider`` for that module." ilk="function" line="380" lineend="387" name="register_loader_type" signature="register_loader_type(loader_type, provider_factory)"><variable ilk="argument" line="380" name="loader_type" /><variable ilk="argument" line="380" name="provider_factory" /></scope><scope doc="Return an IResourceProvider for the named module or requirement" ilk="function" line="389" lineend="399" name="get_provider" returns="_find_adapter()()" signature="get_provider(moduleOrReq)"><variable ilk="argument" line="389" name="moduleOrReq" /><variable line="394" name="module" /><variable citdl="getattr()" line="398" name="loader" /></scope><scope attributes="protected" ilk="function" line="401" lineend="414" name="_macosx_vers" signature="_macosx_vers(_cache=[])"><variable citdl="list" ilk="argument" line="401" name="_cache" /><variable line="403" name="version" /><variable citdl="str" line="406" name="plist" /><variable citdl="plistlib.readPlist()" line="409" name="plist_content" /></scope><scope attributes="protected" ilk="function" line="416" lineend="417" name="_macosx_arch" returns="{}.get()" signature="_macosx_arch(machine)"><variable ilk="argument" line="416" name="machine" /></scope><scope doc="Return this platform's string for platform-specific distributions&#10;&#10;XXX Currently this is the same as ``distutils.util.get_platform()``, but it&#10;needs some hacks for Linux and Mac OS X." ilk="function" line="419" lineend="442" name="get_build_platform" returns="get_platform()" signature="get_build_platform()"><import line="427" module="sysconfig" symbol="get_platform" /><import line="429" module="distutils.util" symbol="get_platform" /><variable citdl="get_platform()" line="431" name="plat" /><variable citdl="_macosx_vers()" line="434" name="version" /><variable line="435" name="machine" /></scope><variable citdl="re.compile()" line="444" name="macosVersionString" /><variable citdl="re.compile()" line="445" name="darwinVersionString" /><variable citdl="get_build_platform" line="447" name="get_platform" /><scope doc="Can code for the `provided` platform run on the `required` platform?&#10;&#10;Returns true if either platform is ``None``, or the platforms are equal.&#10;&#10;XXX Needs compatibility checks for Linux and other unixy OSes." ilk="function" line="450" lineend="493" name="compatible_platforms" returns="bool" signature="compatible_platforms(provided, required)"><variable ilk="argument" line="450" name="provided" /><variable ilk="argument" line="450" name="required" /><variable citdl="macosVersionString.match()" line="462" name="reqMac" /><variable citdl="macosVersionString.match()" line="464" name="provMac" /><variable citdl="darwinVersionString.match()" line="471" name="provDarwin" /><variable citdl="int()" line="473" name="dversion" /><variable line="474" name="macosversion" /></scope><variable citdl="working_set.run_script" doc="Locate distribution `dist_spec` and run its `script_name` script" line="496" name="run_script" /><variable citdl="working_set.run_script" line="505" name="run_main" /><scope doc="Return a current distribution object for a Requirement or string" ilk="function" line="507" lineend="515" name="get_distribution" returns="Requirement.parse()" signature="get_distribution(dist)"><variable citdl="get_provider()" ilk="argument" line="507" name="dist" /></scope><scope doc="Return `name` entry point of `group` for `dist` or raise ImportError" ilk="function" line="517" lineend="519" name="load_entry_point" signature="load_entry_point(dist, group, name)"><variable ilk="argument" line="517" name="dist" /><variable ilk="argument" line="517" name="group" /><variable ilk="argument" line="517" name="name" /></scope><scope doc="Return the entry point map for `group`, or the full entry map" ilk="function" line="521" lineend="523" name="get_entry_map" signature="get_entry_map(dist, group=None)"><variable ilk="argument" line="521" name="dist" /><variable ilk="argument" line="521" name="group" /></scope><scope doc="Return the EntryPoint object for `group`+`name`, or ``None``" ilk="function" line="525" lineend="527" name="get_entry_info" signature="get_entry_info(dist, group, name)"><variable ilk="argument" line="525" name="dist" /><variable ilk="argument" line="525" name="group" /><variable ilk="argument" line="525" name="name" /></scope><scope ilk="class" line="530" lineend="551" name="IMetadataProvider"><scope doc="Does the package's distribution contain the named metadata?" ilk="function" line="532" lineend="533" name="has_metadata" signature="has_metadata()"><variable citdl="IMetadataProvider" ilk="argument" line="532" name="name" /></scope><scope doc="The named metadata resource as a string" ilk="function" line="535" lineend="536" name="get_metadata" signature="get_metadata()"><variable citdl="IMetadataProvider" ilk="argument" line="535" name="name" /></scope><scope doc="Yield named metadata resource as list of non-blank non-comment lines&#10;&#10;Leading and trailing whitespace is stripped from each line, and lines&#10;with ``#`` as the first non-blank character are omitted." ilk="function" line="538" lineend="542" name="get_metadata_lines" signature="get_metadata_lines()"><variable citdl="IMetadataProvider" ilk="argument" line="538" name="name" /></scope><scope doc="Is the named metadata a directory?  (like ``os.path.isdir()``)" ilk="function" line="544" lineend="545" name="metadata_isdir" signature="metadata_isdir()"><variable citdl="IMetadataProvider" ilk="argument" line="544" name="name" /></scope><scope doc="List of metadata names in the directory (like ``os.listdir()``)" ilk="function" line="547" lineend="548" name="metadata_listdir" signature="metadata_listdir()"><variable citdl="IMetadataProvider" ilk="argument" line="547" name="name" /></scope><scope doc="Execute the named script in the supplied namespace dictionary" ilk="function" line="550" lineend="551" name="run_script" signature="run_script(namespace)"><variable citdl="IMetadataProvider" ilk="argument" line="550" name="script_name" /><variable ilk="argument" line="550" name="namespace" /></scope></scope><scope classrefs="IMetadataProvider" doc="An object that provides access to package resources" ilk="class" line="554" lineend="579" name="IResourceProvider"><scope doc="Return a true filesystem path for `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="557" lineend="560" name="get_resource_filename" signature="get_resource_filename(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="557" name="manager" /><variable ilk="argument" line="557" name="resource_name" /></scope><scope doc="Return a readable file-like object for `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="562" lineend="565" name="get_resource_stream" signature="get_resource_stream(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="562" name="manager" /><variable ilk="argument" line="562" name="resource_name" /></scope><scope doc="Return a string containing the contents of `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="567" lineend="570" name="get_resource_string" signature="get_resource_string(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="567" name="manager" /><variable ilk="argument" line="567" name="resource_name" /></scope><scope doc="Does the package contain the named resource?" ilk="function" line="572" lineend="573" name="has_resource" signature="has_resource()"><variable citdl="IResourceProvider" ilk="argument" line="572" name="resource_name" /></scope><scope doc="Is the named resource a directory?  (like ``os.path.isdir()``)" ilk="function" line="575" lineend="576" name="resource_isdir" signature="resource_isdir()"><variable citdl="IResourceProvider" ilk="argument" line="575" name="resource_name" /></scope><scope doc="List of resource names in the directory (like ``os.listdir()``)" ilk="function" line="578" lineend="579" name="resource_listdir" signature="resource_listdir()"><variable citdl="IResourceProvider" ilk="argument" line="578" name="resource_name" /></scope></scope><scope classrefs="object" doc="A collection of active distributions on sys.path (or a similar list)" ilk="class" line="582" lineend="948" name="WorkingSet"><scope attributes="__ctor__" doc="Create working set from list of path entries (default=sys.path)" ilk="function" line="585" lineend="596" name="__init__" signature="WorkingSet(entries=None)"><variable citdl="WorkingSet" ilk="argument" line="585" name="self" /><variable citdl="sys.path" ilk="argument" line="585" name="entries" /><variable line="595" name="entry" /></scope><variable attributes="__instancevar__" citdl="list" line="587" name="entries" /><variable attributes="__instancevar__" citdl="keys.copy()" line="588" name="entry_keys" /><variable attributes="__instancevar__" citdl="by_key.copy()" line="589" name="by_key" /><variable attributes="__instancevar__" citdl="list" line="590" name="callbacks" /><scope attributes="protected __classmethod__" doc="Prepare the master working set." ilk="function" line="598" lineend="598" name="_build_master" returns="cls._build_from_requirements()" signature="_build_master() - classmethod"><import line="605" module="__main__" symbol="__requires__" /><variable citdl="WorkingSet" ilk="argument" line="598" name="cls" /><variable citdl="cls()" line="603" name="ws" /></scope><scope attributes="protected __classmethod__" doc="Build a working set from a requirement spec. Rewrites sys.path." ilk="function" line="618" lineend="618" name="_build_from_requirements" returns="cls()" signature="_build_from_requirements(req_spec) - classmethod"><variable citdl="WorkingSet" ilk="argument" line="618" name="cls" /><variable ilk="argument" line="618" name="req_spec" /><variable citdl="cls()" line="625" name="ws" /><variable citdl="parse_requirements()" line="626" name="reqs" /><variable citdl="ws.resolve()" line="627" name="dists" /><variable line="628" name="dist" /><variable line="632" name="entry" /></scope><scope doc="Add a path item to ``.entries``, finding any distributions on it&#10;&#10;``find_distributions(entry, True)`` is used to find distributions&#10;corresponding to the path entry, and they are added.  `entry` is&#10;always appended to ``.entries``, even if it is already present.&#10;(This is because ``sys.path`` can contain the same value more than&#10;once, and the ``.entries`` of the ``sys.path`` WorkingSet should always&#10;equal ``sys.path``.)" ilk="function" line="640" lineend="653" name="add_entry" signature="add_entry(entry)"><variable citdl="WorkingSet" ilk="argument" line="640" name="self" /><variable ilk="argument" line="640" name="entry" /><variable line="652" name="dist" /></scope><scope doc="True if `dist` is the active distribution for its project" ilk="function" line="655" lineend="657" name="__contains__" returns="bool" signature="__contains__(dist)"><variable citdl="WorkingSet" ilk="argument" line="655" name="self" /><variable ilk="argument" line="655" name="dist" /></scope><scope doc="Find a distribution matching requirement `req`&#10;&#10;If there is an active distribution for the requested project, this&#10;returns it as int as it meets the version requirement specified by&#10;`req`.  But, if there is an active distribution for the project and it&#10;does *not* meet the `req` requirement, ``VersionConflict`` is raised.&#10;If there is no active distribution for the requested project, ``None``&#10;is returned." ilk="function" line="659" lineend="673" name="find" returns="self.by_key.get()" signature="find(req)"><variable citdl="WorkingSet" ilk="argument" line="659" name="self" /><variable ilk="argument" line="659" name="req" /><variable citdl="self.by_key.get()" line="669" name="dist" /></scope><scope doc="Yield entry point objects from `group` matching `name`&#10;&#10;If `name` is None, yields all entry points in `group` from all&#10;distributions in the working set, otherwise only ones matching&#10;both `group` and `name` are yielded (in distribution order)." ilk="function" line="675" lineend="688" name="iter_entry_points" signature="iter_entry_points(group, name=None)"><variable citdl="WorkingSet" ilk="argument" line="675" name="self" /><variable ilk="argument" line="675" name="group" /><variable ilk="argument" line="675" name="name" /><variable line="682" name="dist" /><variable citdl="dist.get_entry_map()" line="683" name="entries" /><variable line="685" name="ep" /></scope><scope doc="Locate distribution for `requires` and run `script_name` script" ilk="function" line="690" lineend="696" name="run_script" signature="run_script(requires, script_name)"><variable citdl="WorkingSet" ilk="argument" line="690" name="self" /><variable ilk="argument" line="690" name="requires" /><variable ilk="argument" line="690" name="script_name" /><variable line="692" name="ns" /><variable line="693" name="name" /></scope><scope doc="Yield distributions for non-duplicate projects in the working set&#10;&#10;The yield order is the order in which the items' path entries were&#10;added to the working set." ilk="function" line="698" lineend="713" name="__iter__" signature="__iter__()"><variable citdl="WorkingSet" ilk="argument" line="698" name="self" /><variable citdl="dict" line="704" name="seen" /><variable line="705" name="item" /><variable line="710" name="key" /></scope><scope doc="Add `dist` to working set, associated with `entry`&#10;&#10;If `entry` is unspecified, it defaults to the ``.location`` of `dist`.&#10;On exit from this routine, `entry` is added to the end of the working&#10;set's ``.entries`` (if it wasn't already present).&#10;&#10;`dist` is only added to the working set if it's for a project that&#10;doesn't already have a distribution in the set, unless `replace=True`.&#10;If it's added, any callbacks registered with the ``subscribe()`` method&#10;will be called." ilk="function" line="715" lineend="743" name="add" signature="add(dist, entry=None, insert=True, replace=False)"><variable citdl="WorkingSet" ilk="argument" line="715" name="self" /><variable ilk="argument" line="715" name="dist" /><variable citdl="dist.location" ilk="argument" line="715" name="entry" /><variable citdl="True" ilk="argument" line="715" name="insert" /><variable citdl="False" ilk="argument" line="715" name="replace" /><variable citdl="self.entry_keys.setdefault()" line="732" name="keys" /><variable citdl="self.entry_keys.setdefault()" line="733" name="keys2" /></scope><scope doc="List all distributions needed to (recursively) meet `requirements`&#10;&#10;`requirements` must be a sequence of ``Requirement`` objects.  `env`,&#10;if supplied, should be an ``Environment`` instance.  If&#10;not supplied, it defaults to all distributions available within any&#10;entry or distribution in the working set.  `installer`, if supplied,&#10;will be invoked with each requirement that cannot be met by an&#10;already-installed distribution; it should return a ``Distribution`` or&#10;``None``.&#10;&#10;Unless `replace_conflicting=True`, raises a VersionConflict exception if&#10;any requirements are found on the path that have the correct name but&#10;the wrong version.  Otherwise, if an `installer` is supplied it will be&#10;invoked to obtain the correct version of the requirement and activate&#10;it." ilk="function" line="745" lineend="823" name="resolve" returns="list" signature="resolve(requirements, env=None, installer=None, replace_conflicting=False)"><variable citdl="WorkingSet" ilk="argument" line="745" name="self" /><variable ilk="argument" line="745" name="requirements" /><variable citdl="Environment()" ilk="argument" line="745" name="env" /><variable ilk="argument" line="745" name="installer" /><variable citdl="False" ilk="argument" line="745" name="replace_conflicting" /><variable citdl="dict" line="767" name="processed" /><variable citdl="dict" line="769" name="best" /><variable citdl="list" line="770" name="to_activate" /><variable citdl="collections.defaultdict()" line="774" name="required_by" /><variable citdl="requirements.pop()" line="778" name="req" /><variable citdl="self.by_key.get()" line="782" name="dist" /><variable citdl="" line="787" name="ws" /><variable line="809" name="dependent_req" /><variable line="813" name="new_requirements" /><variable line="817" name="new_requirement" /></scope><scope doc="Find all activatable distributions in `plugin_env`&#10;&#10;Example usage::&#10;&#10;    distributions, errors = working_set.find_plugins(&#10;        Environment(plugin_dirlist)&#10;    )&#10;&#10;    map(working_set.add, distributions)&#10;&#10;    print('Could not load', errors)&#10;&#10;The `plugin_env` should be an ``Environment`` instance that contains&#10;only distributions that are in the project's &quot;plugin directory&quot; or&#10;directories. The `full_env`, if supplied, should be an ``Environment``&#10;contains all currently-available distributions.  If `full_env` is not&#10;supplied, one is created automatically from the ``WorkingSet`` this&#10;method is called on, which will typically mean that every directory on&#10;``sys.path`` will be scanned for distributions.&#10;&#10;`installer` is a standard installer callback as used by the&#10;``resolve()`` method. The `fallback` flag indicates whether we should&#10;attempt to resolve older versions of a plugin if the newest version&#10;cannot be resolved.&#10;&#10;This method returns a 2-tuple: (`distributions`, `error_info`), where&#10;`distributions` is a list of the distributions found in `plugin_env`&#10;that were loadable, along with any other distributions that are needed&#10;to resolve their dependencies.  `error_info` is a dictionary mapping&#10;unloadable plugin distributions to an exception instance describing the&#10;error that occurred. Usually this will be a ``DistributionNotFound`` or&#10;``VersionConflict`` instance." ilk="function" line="825" lineend="907" name="find_plugins" returns="tuple" signature="find_plugins(plugin_env, full_env=None, installer=None, fallback=True)"><variable citdl="WorkingSet" ilk="argument" line="825" name="self" /><variable ilk="argument" line="825" name="plugin_env" /><variable ilk="argument" line="825" name="full_env" /><variable ilk="argument" line="825" name="installer" /><variable citdl="True" ilk="argument" line="825" name="fallback" /><variable citdl="list()" line="861" name="plugin_projects" /><variable citdl="dict" line="865" name="error_info" /><variable citdl="list()" line="866" name="distributions" /><variable citdl="Environment()" line="869" name="env" /><variable citdl="self.__class__()" line="874" name="shadow_set" /><variable line="878" name="project_name" /><variable line="880" name="dist" /><variable citdl="list" line="882" name="req" /><variable citdl="shadow_set.resolve()" line="885" name="resolvees" /></scope><scope doc="Ensure that distributions matching `requirements` are activated&#10;&#10;`requirements` must be a string or a (possibly-nested) sequence&#10;thereof, specifying the distributions and versions required.  The&#10;return value is a sequence of the distributions that needed to be&#10;activated to fulfill the requirements; all relevant distributions are&#10;included, even if they were already activated in this working set." ilk="function" line="909" lineend="923" name="require" returns="resolve()" signature="require()"><variable attributes="varargs" citdl="WorkingSet" ilk="argument" line="909" name="self" /><variable citdl="resolve()" line="918" name="needed" /><variable line="920" name="dist" /></scope><scope doc="Invoke `callback` for all distributions (including existing ones)" ilk="function" line="925" lineend="931" name="subscribe" signature="subscribe(callback)"><variable citdl="WorkingSet" ilk="argument" line="925" name="self" /><variable ilk="argument" line="925" name="callback" /><variable line="930" name="dist" /></scope><scope attributes="protected" ilk="function" line="933" lineend="935" name="_added_new" signature="_added_new(dist)"><variable citdl="WorkingSet" ilk="argument" line="933" name="self" /><variable ilk="argument" line="933" name="dist" /><variable line="934" name="callback" /></scope><scope ilk="function" line="937" lineend="939" name="__getstate__" returns="tuple" signature="__getstate__()"><variable citdl="WorkingSet" ilk="argument" line="937" name="self" /></scope><scope ilk="function" line="943" lineend="948" name="__setstate__" signature="__setstate__(e_k_b_c)"><variable citdl="WorkingSet" ilk="argument" line="943" name="self" /><variable ilk="argument" line="943" name="e_k_b_c" /></scope></scope><scope classrefs="object" doc="Searchable snapshot of distributions on a search path" ilk="class" line="951" lineend="1084" name="Environment"><scope attributes="__ctor__" doc="Snapshot distributions available on a search path&#10;&#10;Any distributions found on `search_path` are added to the environment.&#10;`search_path` should be a sequence of ``sys.path`` items.  If not&#10;supplied, ``sys.path`` is used.&#10;&#10;`platform` is an optional string specifying the name of the platform&#10;that platform-specific distributions must be compatible with.  If&#10;unspecified, it defaults to the current platform.  `python` is an&#10;optional string naming the desired version of Python (e.g. ``'3.3'``);&#10;it defaults to the current version.&#10;&#10;You may explicitly set `platform` (and/or `python`) to ``None`` if you&#10;wish to map *all* distributions, not just those compatible with the&#10;running platform or Python version." ilk="function" line="954" lineend="975" name="__init__" signature="Environment(search_path=None, platform=get_supported_platform(), python=PY_MAJOR)"><variable citdl="Environment" ilk="argument" line="954" name="self" /><variable ilk="argument" line="954" name="search_path" /><variable citdl="get_supported_platform()" ilk="argument" line="954" name="platform" /><variable ilk="argument" line="954" name="python" /></scope><variable attributes="protected __instancevar__" citdl="dict" line="972" name="_distmap" /><variable attributes="__instancevar__" citdl="get_supported_platform()" line="973" name="platform" /><variable attributes="__instancevar__" line="974" name="python" /><scope doc="Is distribution `dist` acceptable for this environment?&#10;&#10;The distribution must match the platform and python version&#10;requirements specified when this environment was created, or False&#10;is returned." ilk="function" line="977" lineend="986" name="can_add" returns="bool" signature="can_add(dist)"><variable citdl="Environment" ilk="argument" line="977" name="self" /><variable ilk="argument" line="977" name="dist" /></scope><scope doc="Remove `dist` from the environment" ilk="function" line="988" lineend="990" name="remove" signature="remove(dist)"><variable citdl="Environment" ilk="argument" line="988" name="self" /><variable ilk="argument" line="988" name="dist" /></scope><scope doc="Scan `search_path` for distributions usable in this environment&#10;&#10;Any distributions found are added to the environment.&#10;`search_path` should be a sequence of ``sys.path`` items.  If not&#10;supplied, ``sys.path`` is used.  Only distributions conforming to&#10;the platform/python version defined at initialization are added." ilk="function" line="992" lineend="1005" name="scan" signature="scan(search_path=None)"><variable citdl="Environment" ilk="argument" line="992" name="self" /><variable citdl="sys.path" ilk="argument" line="992" name="search_path" /><variable line="1003" name="item" /><variable line="1004" name="dist" /></scope><scope doc="Return a newest-to-oldest list of distributions for `project_name`&#10;&#10;Uses case-insensitive `project_name` comparison, assuming all the&#10;project's distributions use their project's name converted to all&#10;lowercase as their key." ilk="function" line="1007" lineend="1016" name="__getitem__" returns="self._distmap.get()" signature="__getitem__(project_name)"><variable citdl="Environment" ilk="argument" line="1007" name="self" /><variable ilk="argument" line="1007" name="project_name" /><variable citdl="project_name.lower()" line="1015" name="distribution_key" /></scope><scope doc="Add `dist` if we ``can_add()`` it and it has not already been added&#10;        " ilk="function" line="1018" lineend="1025" name="add" signature="add(dist)"><variable citdl="Environment" ilk="argument" line="1018" name="self" /><variable ilk="argument" line="1018" name="dist" /><variable citdl="self._distmap.setdefault()" line="1022" name="dists" /></scope><scope doc="Find distribution best matching `req` and usable on `working_set`&#10;&#10;This calls the ``find(req)`` method of the `working_set` to see if a&#10;suitable distribution is already active.  (This may raise&#10;``VersionConflict`` if an unsuitable version of the project is already&#10;active in the specified `working_set`.)  If a suitable distribution&#10;isn't active, this method returns the newest distribution in the&#10;environment that meets the ``Requirement`` in `req`.  If no suitable&#10;distribution is found, and `installer` is supplied, then the result of&#10;calling the environment's ``obtain(req, installer)`` method will be&#10;returned." ilk="function" line="1027" lineend="1047" name="best_match" returns="working_set.find()" signature="best_match(req, working_set, installer=None)"><variable citdl="Environment" ilk="argument" line="1027" name="self" /><variable ilk="argument" line="1027" name="req" /><variable ilk="argument" line="1027" name="working_set" /><variable ilk="argument" line="1027" name="installer" /><variable citdl="working_set.find()" line="1040" name="dist" /></scope><scope doc="Obtain a distribution matching `requirement` (e.g. via download)&#10;&#10;Obtain a distro that matches requirement (e.g. via download).  In the&#10;base ``Environment`` class, this routine just returns&#10;``installer(requirement)``, unless `installer` is None, in which case&#10;None is returned instead.  This method is a hook that allows subclasses&#10;to attempt other ways of obtaining a distribution before falling back&#10;to the `installer` argument." ilk="function" line="1049" lineend="1059" name="obtain" returns="Environment.obtain.installer()" signature="obtain(requirement, installer=None)"><variable citdl="Environment" ilk="argument" line="1049" name="self" /><variable ilk="argument" line="1049" name="requirement" /><variable ilk="argument" line="1049" name="installer" /></scope><scope doc="Yield the unique project names of the available distributions" ilk="function" line="1061" lineend="1065" name="__iter__" signature="__iter__()"><variable citdl="Environment" ilk="argument" line="1061" name="self" /><variable line="1063" name="key" /></scope><scope doc="In-place addition of a distribution or environment" ilk="function" line="1067" lineend="1077" name="__iadd__" returns="Environment" signature="__iadd__(other)"><variable citdl="Environment" ilk="argument" line="1067" name="self" /><variable ilk="argument" line="1067" name="other" /><variable line="1072" name="project" /><variable line="1073" name="dist" /></scope><scope doc="Add an environment or distribution to an environment" ilk="function" line="1079" lineend="1084" name="__add__" returns="self.__class__()" signature="__add__(other)"><variable citdl="Environment" ilk="argument" line="1079" name="self" /><variable ilk="argument" line="1079" name="other" /><variable citdl="self.__class__()" line="1081" name="new" /><variable line="1082" name="env" /></scope></scope><variable citdl="Environment" line="1088" name="AvailableDistributions" /><scope classrefs="RuntimeError" doc="An error occurred extracting a resource&#10;&#10;The following attributes are available from instances of this exception:&#10;&#10;manager&#10;    The resource manager that raised this exception&#10;&#10;cache_path&#10;    The base directory for resource extraction&#10;&#10;original_error&#10;    The exception instance that caused extraction to fail" ilk="class" line="1091" lineend="1104" name="ExtractionError" /><scope doc="Manage resource extraction and packages" ilk="class" line="1107" lineend="1280" name="ResourceManager"><variable line="1109" name="extraction_path" /><scope attributes="__ctor__" ilk="function" line="1111" lineend="1112" name="__init__" signature="ResourceManager()"><variable citdl="ResourceManager" ilk="argument" line="1111" name="self" /></scope><variable attributes="__instancevar__" citdl="dict" line="1112" name="cached_files" /><scope doc="Does the named resource exist?" ilk="function" line="1114" lineend="1116" name="resource_exists" signature="resource_exists(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1114" name="self" /><variable ilk="argument" line="1114" name="package_or_requirement" /><variable ilk="argument" line="1114" name="resource_name" /></scope><scope doc="Is the named resource an existing directory?" ilk="function" line="1118" lineend="1121" name="resource_isdir" signature="resource_isdir(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1118" name="self" /><variable ilk="argument" line="1118" name="package_or_requirement" /><variable ilk="argument" line="1118" name="resource_name" /></scope><scope doc="Return a true filesystem path for specified resource" ilk="function" line="1124" lineend="1127" name="resource_filename" signature="resource_filename(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1124" name="self" /><variable ilk="argument" line="1124" name="package_or_requirement" /><variable ilk="argument" line="1124" name="resource_name" /></scope><scope doc="Return a readable file-like object for specified resource" ilk="function" line="1130" lineend="1133" name="resource_stream" signature="resource_stream(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1130" name="self" /><variable ilk="argument" line="1130" name="package_or_requirement" /><variable ilk="argument" line="1130" name="resource_name" /></scope><scope doc="Return specified resource as a string" ilk="function" line="1136" lineend="1139" name="resource_string" signature="resource_string(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1136" name="self" /><variable ilk="argument" line="1136" name="package_or_requirement" /><variable ilk="argument" line="1136" name="resource_name" /></scope><scope doc="List the contents of the named resource directory" ilk="function" line="1142" lineend="1145" name="resource_listdir" signature="resource_listdir(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1142" name="self" /><variable ilk="argument" line="1142" name="package_or_requirement" /><variable ilk="argument" line="1142" name="resource_name" /></scope><scope doc="Give an error message for problems extracting file(s)" ilk="function" line="1148" lineend="1173" name="extraction_error" signature="extraction_error()"><variable citdl="ResourceManager" ilk="argument" line="1148" name="self" /><variable line="1151" name="old_exc" /><variable citdl="get_default_cache()" line="1152" name="cache_path" /><variable citdl="ExtractionError" line="1154" name="err" /></scope><scope doc="Return absolute location in cache for `archive_name` and `names`&#10;&#10;The parent directory of the resulting path will be created if it does&#10;not already exist.  `archive_name` should be the base filename of the&#10;enclosing egg (which may not be the name of the enclosing zipfile!),&#10;including its &quot;.egg&quot; extension.  `names`, if provided, should be a&#10;sequence of path name parts &quot;under&quot; the egg's extraction location.&#10;&#10;This method should only be called by resource providers that need to&#10;obtain an extraction location, and only for names they intend to&#10;extract, as it tracks the generated names for possible cleanup later." ilk="function" line="1175" lineend="1198" name="get_cache_path" returns="os.path.join()" signature="get_cache_path(archive_name, names=())"><variable citdl="ResourceManager" ilk="argument" line="1175" name="self" /><variable ilk="argument" line="1175" name="archive_name" /><variable citdl="tuple" ilk="argument" line="1175" name="names" /><variable citdl="get_default_cache()" line="1188" name="extract_path" /><variable citdl="os.path.join()" line="1189" name="target_path" /></scope><scope attributes="protected __staticmethod__" doc="If the default extraction path is overridden and set to an insecure&#10;location, such as /tmp, it opens up an opportunity for an attacker to&#10;replace an extracted file with an unauthorized payload. Warn the user&#10;if a known insecure location is used.&#10;&#10;See Distribute #375 for more details." ilk="function" line="1200" lineend="1200" name="_warn_unsafe_extraction_path" signature="_warn_unsafe_extraction_path(path) - staticmethod"><variable citdl="ResourceManager" ilk="argument" line="1200" name="path" /><variable line="1215" name="mode" /><variable line="1217" name="msg" /></scope><scope doc="Perform any platform-specific postprocessing of `tempname`&#10;&#10;This is where Mac header rewrites should be done; other platforms don't&#10;have anything special they should do.&#10;&#10;Resource providers should call this method ONLY after successfully&#10;extracting a compressed resource.  They must NOT call it on resources&#10;that are already in the filesystem.&#10;&#10;`tempname` is the current (temporary) name of the file, and `filename`&#10;is the name it will be renamed to by the caller after this routine&#10;returns." ilk="function" line="1224" lineend="1242" name="postprocess" signature="postprocess(tempname, filename)"><variable citdl="ResourceManager" ilk="argument" line="1224" name="self" /><variable ilk="argument" line="1224" name="tempname" /><variable ilk="argument" line="1224" name="filename" /><variable citdl="int" line="1241" name="mode" /></scope><scope doc="Set the base path where resources will be extracted to, if needed.&#10;&#10;If you do not call this routine before any extractions take place, the&#10;path defaults to the return value of ``get_default_cache()``.  (Which&#10;is based on the ``PYTHON_EGG_CACHE`` environment variable, with various&#10;platform-specific fallbacks.  See that routine's documentation for more&#10;details.)&#10;&#10;Resources are extracted to subdirectories of this path based upon&#10;information given by the ``IResourceProvider``.  You may set this to a&#10;temporary directory, but then you must call ``cleanup_resources()`` to&#10;delete the extracted files when done.  There is no guarantee that&#10;``cleanup_resources()`` will be able to remove all extracted files.&#10;&#10;(Note: you may not change the extraction path for a given resource&#10;manager once resources have been extracted, unless you first call&#10;``cleanup_resources()``.)" ilk="function" line="1244" lineend="1268" name="set_extraction_path" signature="set_extraction_path(path)"><variable citdl="ResourceManager" ilk="argument" line="1244" name="self" /><variable ilk="argument" line="1244" name="path" /></scope><scope doc="Delete all extracted resource files and directories, returning a list&#10;of the file and directory names that could not be successfully removed.&#10;This function does not have any concurrency protection, so it should&#10;generally only be called when the extraction path is a temporary&#10;directory exclusive to a single process.  This method is not&#10;automatically called; you must call it explicitly or register it as an&#10;``atexit`` function if you wish to ensure cleanup of a temporary&#10;directory used for extractions." ilk="function" line="1270" lineend="1280" name="cleanup_resources" signature="cleanup_resources(force=False)"><variable citdl="ResourceManager" ilk="argument" line="1270" name="self" /><variable citdl="False" ilk="argument" line="1270" name="force" /></scope></scope><scope doc="Determine the default cache location&#10;&#10;This returns the ``PYTHON_EGG_CACHE`` environment variable, if set.&#10;Otherwise, on Windows, it returns a &quot;Python-Eggs&quot; subdirectory of the&#10;&quot;Application Data&quot; directory.  On all other systems, it's &quot;~/.python-eggs&quot;." ilk="function" line="1283" lineend="1324" name="get_default_cache" returns="os.path.expanduser()" signature="get_default_cache()"><variable citdl="str" line="1299" name="app_data" /><variable citdl="list" line="1300" name="app_homes" /><variable line="1311" name="subdir" /><variable line="1311" name="keys" /><variable citdl="os.path.join()" line="1312" name="dirname" /><variable line="1313" name="key" /></scope><scope doc="Convert an arbitrary string to a standard distribution name&#10;&#10;Any runs of non-alphanumeric/. characters are replaced with a single '-'." ilk="function" line="1327" lineend="1332" name="safe_name" returns="re.sub()" signature="safe_name(name)"><variable ilk="argument" line="1327" name="name" /></scope><scope doc="Convert an arbitrary string to a standard version string" ilk="function" line="1335" lineend="1344" name="safe_version" returns="re.sub()" signature="safe_version(version)"><variable citdl="version.replace()" ilk="argument" line="1335" name="version" /></scope><scope doc="Convert an arbitrary string to a standard 'extra' name&#10;&#10;Any runs of non-alphanumeric characters are replaced with a single '_',&#10;and the result is always lowercased." ilk="function" line="1347" lineend="1353" name="safe_extra" signature="safe_extra(extra)"><variable ilk="argument" line="1347" name="extra" /></scope><scope doc="Convert a project or version name to its filename-escaped form&#10;&#10;Any '-' characters are currently replaced with '_'." ilk="function" line="1356" lineend="1361" name="to_filename" returns="name.replace()" signature="to_filename(name)"><variable ilk="argument" line="1356" name="name" /></scope><scope classrefs="object" ilk="class" line="1364" lineend="1537" name="MarkerEvaluation"><variable citdl="dict" line="1365" name="values" /><scope attributes="__classmethod__" doc="Validate text as a PEP 426 environment marker; return an exception&#10;if invalid or False otherwise." ilk="function" line="1375" lineend="1375" name="is_invalid_marker" returns="bool" signature="is_invalid_marker(text) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1375" name="cls" /><variable ilk="argument" line="1375" name="text" /></scope><scope attributes="__staticmethod__" doc="Given a SyntaxError from a marker evaluation, normalize the error&#10;message:&#10; - Remove indications of filename and line number.&#10; - Replace platform-specific error messages with standard error&#10;   messages." ilk="function" line="1387" lineend="1387" name="normalize_exception" returns="MarkerEvaluation" signature="normalize_exception(exc) - staticmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1387" name="exc" /><variable citdl="dict" line="1396" name="subs" /></scope><variable attributes="__instancevar__" line="1400" name="filename" /><variable attributes="__instancevar__" line="1401" name="lineno" /><variable attributes="__instancevar__" citdl="subs.get()" line="1402" name="msg" /><scope attributes="__classmethod__" ilk="function" line="1405" lineend="1405" name="and_test" returns="functools.reduce()" signature="and_test(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1405" name="cls" /><variable ilk="argument" line="1405" name="nodelist" /><variable citdl="list" line="1408" name="items" /></scope><scope attributes="__classmethod__" ilk="function" line="1414" lineend="1414" name="test" returns="functools.reduce()" signature="test(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1414" name="cls" /><variable ilk="argument" line="1414" name="nodelist" /><variable citdl="list" line="1417" name="items" /></scope><scope attributes="__classmethod__" ilk="function" line="1423" lineend="1423" name="atom" returns="cls.interpret()" signature="atom(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1423" name="cls" /><variable ilk="argument" line="1423" name="nodelist" /><variable line="1425" name="t" /><variable citdl="str" line="1430" name="msg" /></scope><scope attributes="__classmethod__" ilk="function" line="1433" lineend="1433" name="comparison" returns="MarkerEvaluation.comparison.cop()" signature="comparison(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1433" name="cls" /><variable ilk="argument" line="1433" name="nodelist" /><variable citdl="str" line="1436" name="msg" /><variable line="1438" name="comp" /><variable citdl="str" line="1439" name="cop" /></scope><scope attributes="__classmethod__" ilk="function" line="1453" lineend="1453" name="get_op" signature="get_op(op) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1453" name="cls" /><variable ilk="argument" line="1453" name="op" /><variable citdl="dict" line="1455" name="ops" /></scope><scope attributes="protected __classmethod__" doc="Evaluate a PEP 426 environment marker using markerlib.&#10;Return a boolean indicating the marker result in this environment.&#10;Raise SyntaxError if marker is invalid." ilk="function" line="1483" lineend="1483" name="_markerlib_evaluate" returns="_markerlib.interpret()" signature="_markerlib_evaluate(text) - classmethod"><import line="1490" module="_markerlib" /><variable citdl="MarkerEvaluation" ilk="argument" line="1483" name="cls" /><variable ilk="argument" line="1483" name="text" /><variable citdl="_markerlib.default_environment()" line="1493" name="env" /><variable line="1494" name="key" /><variable citdl="key.replace()" line="1495" name="new_key" /><variable citdl="_markerlib.interpret()" line="1498" name="result" /></scope><variable attributes="__classmethod__" citdl="function" doc="Evaluate a PEP 426 environment marker on CPython 2.4+.&#10;Return a boolean indicating the marker result in this environment.&#10;Raise SyntaxError if marker is invalid.&#10;&#10;This implementation uses the 'parser' module, which is not implemented&#10;on&#10;Jython and has been superseded by the 'ast' module in Python 2.6 and&#10;later." line="1506" name="evaluate_marker" /><scope attributes="__classmethod__" ilk="function" line="1508" lineend="1508" name="interpret" returns="MarkerEvaluation.interpret.op()" signature="interpret(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1508" name="cls" /><variable ilk="argument" line="1508" name="nodelist" /><variable citdl="get_op()" line="1512" name="op" /></scope><scope attributes="__classmethod__" ilk="function" line="1517" lineend="1517" name="evaluate" returns="MarkerEvaluation.evaluate.op()" signature="evaluate(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1517" name="cls" /><variable ilk="argument" line="1517" name="nodelist" /><variable line="1520" name="kind" /><variable line="1521" name="name" /><variable line="1524" name="op" /><variable line="1529" name="s" /><variable citdl="str" line="1534" name="msg" /></scope><scope attributes="protected __staticmethod__" ilk="function" line="1537" lineend="1537" name="_safe_string" returns="cand.startswith()" signature="_safe_string(cand) - staticmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1537" name="cand" /></scope></scope><variable citdl="MarkerEvaluation.is_invalid_marker" line="1546" name="invalid_marker" /><variable citdl="function" line="1547" name="evaluate_marker" /><scope doc="Try to implement resources and metadata for arbitrary PEP 302 loaders" ilk="class" line="1549" lineend="1647" name="NullProvider"><variable line="1552" name="egg_name" /><variable line="1553" name="egg_info" /><variable citdl="getattr()" line="1554" name="loader" /><scope attributes="__ctor__" ilk="function" line="1556" lineend="1558" name="__init__" signature="NullProvider(module)"><variable citdl="NullProvider" ilk="argument" line="1556" name="self" /><variable ilk="argument" line="1556" name="module" /></scope><variable attributes="__instancevar__" citdl="os.path.dirname()" line="1558" name="module_path" /><scope ilk="function" line="1560" lineend="1561" name="get_resource_filename" returns="self._fn()" signature="get_resource_filename(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1560" name="self" /><variable ilk="argument" line="1560" name="manager" /><variable ilk="argument" line="1560" name="resource_name" /></scope><scope ilk="function" line="1563" lineend="1564" name="get_resource_stream" returns="io.BytesIO()" signature="get_resource_stream(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1563" name="self" /><variable ilk="argument" line="1563" name="manager" /><variable ilk="argument" line="1563" name="resource_name" /></scope><scope ilk="function" line="1566" lineend="1567" name="get_resource_string" returns="self._get()" signature="get_resource_string(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1566" name="self" /><variable ilk="argument" line="1566" name="manager" /><variable ilk="argument" line="1566" name="resource_name" /></scope><scope ilk="function" line="1569" lineend="1570" name="has_resource" returns="self._has()" signature="has_resource(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1569" name="self" /><variable ilk="argument" line="1569" name="resource_name" /></scope><scope ilk="function" line="1572" lineend="1573" name="has_metadata" returns="self._has()" signature="has_metadata(name)"><variable citdl="NullProvider" ilk="argument" line="1572" name="self" /><variable ilk="argument" line="1572" name="name" /></scope><scope ilk="function" line="1581" lineend="1584" name="get_metadata" returns="str" signature="get_metadata(name)"><variable citdl="NullProvider" ilk="argument" line="1581" name="self" /><variable ilk="argument" line="1581" name="name" /></scope><scope ilk="function" line="1586" lineend="1587" name="get_metadata_lines" returns="yield_lines()" signature="get_metadata_lines(name)"><variable citdl="NullProvider" ilk="argument" line="1586" name="self" /><variable ilk="argument" line="1586" name="name" /></scope><scope ilk="function" line="1589" lineend="1590" name="resource_isdir" returns="self._isdir()" signature="resource_isdir(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1589" name="self" /><variable ilk="argument" line="1589" name="resource_name" /></scope><scope ilk="function" line="1592" lineend="1593" name="metadata_isdir" returns="self._isdir()" signature="metadata_isdir(name)"><variable citdl="NullProvider" ilk="argument" line="1592" name="self" /><variable ilk="argument" line="1592" name="name" /></scope><scope ilk="function" line="1595" lineend="1596" name="resource_listdir" returns="self._listdir()" signature="resource_listdir(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1595" name="self" /><variable ilk="argument" line="1595" name="resource_name" /></scope><scope ilk="function" line="1598" lineend="1601" name="metadata_listdir" returns="list" signature="metadata_listdir(name)"><variable citdl="NullProvider" ilk="argument" line="1598" name="self" /><variable ilk="argument" line="1598" name="name" /></scope><scope ilk="function" line="1603" lineend="1621" name="run_script" signature="run_script(script_name, namespace)"><import line="1616" module="linecache" symbol="cache" /><variable citdl="NullProvider" ilk="argument" line="1603" name="self" /><variable ilk="argument" line="1603" name="script_name" /><variable ilk="argument" line="1603" name="namespace" /><variable line="1604" name="script" /><variable citdl="script_text.replace()" line="1607" name="script_text" /><variable citdl="self._fn()" line="1609" name="script_filename" /><variable line="1612" name="source" /><variable citdl="compile()" line="1613" name="code" /><variable citdl="compile()" line="1620" name="script_code" /></scope><scope attributes="protected" ilk="function" line="1623" lineend="1625" name="_has" signature="_has(path)"><variable citdl="NullProvider" ilk="argument" line="1623" name="self" /><variable ilk="argument" line="1623" name="path" /></scope><scope attributes="protected" ilk="function" line="1628" lineend="1630" name="_isdir" signature="_isdir(path)"><variable citdl="NullProvider" ilk="argument" line="1628" name="self" /><variable ilk="argument" line="1628" name="path" /></scope><scope attributes="protected" ilk="function" line="1633" lineend="1635" name="_listdir" signature="_listdir(path)"><variable citdl="NullProvider" ilk="argument" line="1633" name="self" /><variable ilk="argument" line="1633" name="path" /></scope><scope attributes="protected" ilk="function" line="1638" lineend="1641" name="_fn" returns="os.path.join()" signature="_fn(base, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1638" name="self" /><variable ilk="argument" line="1638" name="base" /><variable ilk="argument" line="1638" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1643" lineend="1647" name="_get" returns="self.loader.get_data()" signature="_get(path)"><variable citdl="NullProvider" ilk="argument" line="1643" name="self" /><variable ilk="argument" line="1643" name="path" /></scope></scope><scope classrefs="NullProvider" doc="Provider based on a virtual filesystem" ilk="class" line="1653" lineend="1672" name="EggProvider"><scope attributes="__ctor__" ilk="function" line="1656" lineend="1658" name="__init__" signature="EggProvider(module)"><variable citdl="EggProvider" ilk="argument" line="1656" name="self" /><variable ilk="argument" line="1656" name="module" /></scope><scope attributes="protected" ilk="function" line="1660" lineend="1672" name="_setup_prefix" signature="_setup_prefix()"><variable citdl="EggProvider" ilk="argument" line="1660" name="self" /><variable citdl="self.module_path" line="1663" name="path" /><variable citdl="self.module_path" line="1664" name="old" /><variable line="1672" name="base" /></scope><variable attributes="__instancevar__" citdl="os.path.basename()" line="1667" name="egg_name" /><variable attributes="__instancevar__" citdl="os.path.join()" line="1668" name="egg_info" /><variable attributes="__instancevar__" citdl="self.module_path" line="1669" name="egg_root" /></scope><scope classrefs="EggProvider" doc="Provides access to package resources in the filesystem" ilk="class" line="1674" lineend="1691" name="DefaultProvider"><scope attributes="protected" ilk="function" line="1677" lineend="1678" name="_has" returns="os.path.exists()" signature="_has(path)"><variable citdl="DefaultProvider" ilk="argument" line="1677" name="self" /><variable ilk="argument" line="1677" name="path" /></scope><scope attributes="protected" ilk="function" line="1680" lineend="1681" name="_isdir" returns="os.path.isdir()" signature="_isdir(path)"><variable citdl="DefaultProvider" ilk="argument" line="1680" name="self" /><variable ilk="argument" line="1680" name="path" /></scope><scope attributes="protected" ilk="function" line="1683" lineend="1684" name="_listdir" returns="os.listdir()" signature="_listdir(path)"><variable citdl="DefaultProvider" ilk="argument" line="1683" name="self" /><variable ilk="argument" line="1683" name="path" /></scope><scope ilk="function" line="1686" lineend="1687" name="get_resource_stream" returns="open()" signature="get_resource_stream(manager, resource_name)"><variable citdl="DefaultProvider" ilk="argument" line="1686" name="self" /><variable ilk="argument" line="1686" name="manager" /><variable ilk="argument" line="1686" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1689" lineend="1691" name="_get" returns="stream.read()" signature="_get(path)"><variable citdl="DefaultProvider" ilk="argument" line="1689" name="self" /><variable ilk="argument" line="1689" name="path" /></scope></scope><scope classrefs="NullProvider" doc="Provider that returns nothing for all requests" ilk="class" line="1699" lineend="1708" name="EmptyProvider"><variable attributes="protected" line="1702" name="_isdir" /><variable attributes="protected" line="1703" name="_get" /><variable attributes="protected" line="1704" name="_listdir" /><variable line="1705" name="module_path" /><scope attributes="__ctor__" ilk="function" line="1707" lineend="1708" name="__init__" signature="EmptyProvider()"><variable citdl="EmptyProvider" ilk="argument" line="1707" name="self" /></scope></scope><variable citdl="EmptyProvider" line="1710" name="empty_provider" /><scope classrefs="dict" doc="zip manifest builder" ilk="class" line="1713" lineend="1737" name="ZipManifests"><scope attributes="__classmethod__" doc="Build a dictionary similar to the zipimport directory&#10;caches, except instead of tuples, store ZipInfo objects.&#10;&#10;Use a platform-specific path separator (os.sep) for the path keys&#10;for compatibility with pypy on Windows." ilk="function" line="1718" lineend="1718" name="build" returns="dict()" signature="build(path) - classmethod"><variable citdl="ZipManifests" ilk="argument" line="1718" name="cls" /><variable ilk="argument" line="1718" name="path" /><variable line="1728" name="items" /></scope><variable citdl="ZipManifests.build" line="1737" name="load" /></scope><scope classrefs="ZipManifests" doc="Memoized zipfile manifests." ilk="class" line="1740" lineend="1757" name="MemoizedZipManifests"><variable citdl="collections.namedtuple()" line="1744" name="manifest_mod" /><scope doc="Load a manifest at path or return a suitable manifest already loaded." ilk="function" line="1746" lineend="1757" name="load" signature="load(path)"><variable citdl="MemoizedZipManifests" ilk="argument" line="1746" name="self" /><variable citdl="os.path.normpath()" ilk="argument" line="1746" name="path" /><variable line="1751" name="mtime" /><variable citdl="self.build()" line="1754" name="manifest" /></scope></scope><scope classrefs="zipfile.ZipFile" doc="Supplement ZipFile class to support context manager for Python 2.6" ilk="class" line="1760" lineend="1777" name="ContextualZipFile"><scope ilk="function" line="1765" lineend="1766" name="__enter__" returns="ContextualZipFile" signature="__enter__()"><variable citdl="ContextualZipFile" ilk="argument" line="1765" name="self" /></scope><scope ilk="function" line="1768" lineend="1769" name="__exit__" signature="__exit__(type, value, traceback)"><variable citdl="ContextualZipFile" ilk="argument" line="1768" name="self" /><variable ilk="argument" line="1768" name="type" /><variable ilk="argument" line="1768" name="value" /><variable ilk="argument" line="1768" name="traceback" /></scope><scope doc="Construct a ZipFile or ContextualZipFile as appropriate" ilk="function" line="1771" lineend="1777" name="__new__" returns="zipfile.ZipFile()" signature="__new__()"><variable attributes="kwargs" citdl="ContextualZipFile" ilk="argument" line="1771" name="cls" /></scope></scope><scope classrefs="EggProvider" doc="Resource support for zips and eggs" ilk="class" line="1780" lineend="1943" name="ZipProvider"><variable citdl="list" line="1783" name="eagers" /><variable attributes="protected" citdl="MemoizedZipManifests" line="1784" name="_zip_manifests" /><scope attributes="__ctor__" ilk="function" line="1786" lineend="1788" name="__init__" signature="ZipProvider(module)"><variable citdl="ZipProvider" ilk="argument" line="1786" name="self" /><variable ilk="argument" line="1786" name="module" /></scope><variable attributes="__instancevar__" line="1788" name="zip_pre" /><scope attributes="protected" ilk="function" line="1790" lineend="1796" name="_zipinfo_name" signature="_zipinfo_name(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1790" name="self" /><variable ilk="argument" line="1790" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1799" lineend="1806" name="_parts" signature="_parts(zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1799" name="self" /><variable ilk="argument" line="1799" name="zip_path" /><variable line="1802" name="fspath" /></scope><scope attributes="__hidden__" ilk="function" line="1809" lineend="1809" name="zipinfo (property getter)" returns="self._zip_manifests.load()" signature="zipinfo (property getter)()"><variable citdl="ZipProvider" ilk="argument" line="1809" name="self" /></scope><variable attributes="property" citdl="self._zip_manifests.load()" line="1809" name="zipinfo" /><scope ilk="function" line="1813" lineend="1824" name="get_resource_filename" returns="self._extract_resource()" signature="get_resource_filename(manager, resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1813" name="self" /><variable ilk="argument" line="1813" name="manager" /><variable ilk="argument" line="1813" name="resource_name" /><variable citdl="self._resource_to_zip()" line="1819" name="zip_path" /><variable citdl="self._get_eager_resources()" line="1820" name="eagers" /><variable line="1822" name="name" /></scope><scope attributes="protected __staticmethod__" ilk="function" line="1826" lineend="1826" name="_get_date_and_size" returns="tuple" signature="_get_date_and_size(zip_stat) - staticmethod"><variable citdl="ZipProvider" ilk="argument" line="1826" name="zip_stat" /><variable citdl="zip_stat.file_size" line="1828" name="size" /><variable line="1830" name="date_time" /><variable citdl="time.mktime()" line="1832" name="timestamp" /></scope><scope attributes="protected" ilk="function" line="1835" lineend="1885" name="_extract_resource" returns="manager.get_cache_path()" signature="_extract_resource(manager, zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1835" name="self" /><variable ilk="argument" line="1835" name="manager" /><variable ilk="argument" line="1835" name="zip_path" /><variable line="1838" name="name" /><variable citdl="()" line="1839" name="last" /><variable line="1845" name="timestamp" /><variable line="1845" name="size" /><variable citdl="manager.get_cache_path()" line="1852" name="real_path" /><variable line="1859" name="tmpnam" /><variable line="1859" name="outf" /></scope><scope attributes="protected" doc="Return True if the file_path is current for this zip_path" ilk="function" line="1887" lineend="1901" name="_is_current" returns="bool" signature="_is_current(file_path, zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1887" name="self" /><variable ilk="argument" line="1887" name="file_path" /><variable ilk="argument" line="1887" name="zip_path" /><variable line="1891" name="timestamp" /><variable line="1891" name="size" /><variable citdl="os.stat()" line="1894" name="stat" /><variable citdl="self.loader.get_data()" line="1898" name="zip_contents" /><variable citdl="f.read()" line="1900" name="file_contents" /></scope><scope attributes="protected" ilk="function" line="1903" lineend="1910" name="_get_eager_resources" returns="list" signature="_get_eager_resources()"><variable citdl="ZipProvider" ilk="argument" line="1903" name="self" /><variable citdl="list" line="1905" name="eagers" /><variable line="1906" name="name" /></scope><scope attributes="protected" ilk="function" line="1912" lineend="1927" name="_index" returns="dict" signature="_index()"><variable citdl="ZipProvider" ilk="argument" line="1912" name="self" /><variable citdl="dict" line="1916" name="ind" /><variable line="1917" name="path" /><variable citdl="path.split()" line="1918" name="parts" /><variable citdl="os.sep.join()" line="1920" name="parent" /></scope><variable attributes="protected __instancevar__" citdl="dict" line="1926" name="_dirindex" /><scope attributes="protected" ilk="function" line="1929" lineend="1931" name="_has" returns="bool" signature="_has(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1929" name="self" /><variable ilk="argument" line="1929" name="fspath" /><variable citdl="_zipinfo_name()" line="1930" name="zip_path" /></scope><scope attributes="protected" ilk="function" line="1933" lineend="1934" name="_isdir" returns="bool" signature="_isdir(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1933" name="self" /><variable ilk="argument" line="1933" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1936" lineend="1937" name="_listdir" returns="list()" signature="_listdir(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1936" name="self" /><variable ilk="argument" line="1936" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1939" lineend="1940" name="_eager_to_zip" returns="ZipProvider._zipinfo_name()" signature="_eager_to_zip(resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1939" name="self" /><variable ilk="argument" line="1939" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1942" lineend="1943" name="_resource_to_zip" returns="ZipProvider._zipinfo_name()" signature="_resource_to_zip(resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1942" name="self" /><variable ilk="argument" line="1942" name="resource_name" /></scope></scope><scope classrefs="EmptyProvider" doc="Metadata handler for standalone PKG-INFO files&#10;&#10;Usage::&#10;&#10;    metadata = FileMetadata(&quot;/path/to/PKG-INFO&quot;)&#10;&#10;This provider rejects all data and metadata requests except for PKG-INFO,&#10;which is treated as existing, and will be the contents of the file at&#10;the provided location." ilk="class" line="1948" lineend="1974" name="FileMetadata"><scope attributes="__ctor__" ilk="function" line="1960" lineend="1961" name="__init__" signature="FileMetadata(path)"><variable citdl="FileMetadata" ilk="argument" line="1960" name="self" /><variable ilk="argument" line="1960" name="path" /></scope><variable attributes="__instancevar__" line="1961" name="path" /><scope ilk="function" line="1963" lineend="1964" name="has_metadata" returns="bool" signature="has_metadata(name)"><variable citdl="FileMetadata" ilk="argument" line="1963" name="self" /><variable ilk="argument" line="1963" name="name" /></scope><scope ilk="function" line="1966" lineend="1971" name="get_metadata" returns="f.read()" signature="get_metadata(name)"><variable citdl="FileMetadata" ilk="argument" line="1966" name="self" /><variable ilk="argument" line="1966" name="name" /><variable citdl="f.read()" line="1969" name="metadata" /></scope><scope ilk="function" line="1973" lineend="1974" name="get_metadata_lines" returns="yield_lines()" signature="get_metadata_lines(name)"><variable citdl="FileMetadata" ilk="argument" line="1973" name="self" /><variable ilk="argument" line="1973" name="name" /></scope></scope><scope classrefs="DefaultProvider" doc="Metadata provider for egg directories&#10;&#10;Usage::&#10;&#10;&#10;&#10;    egg_info = &quot;/path/to/PackageName.egg-info&quot;&#10;    base_dir = os.path.dirname(egg_info)&#10;    metadata = PathMetadata(base_dir, egg_info)&#10;    dist_name = os.path.splitext(os.path.basename(egg_info))[0]&#10;    dist = Distribution(basedir, project_name=dist_name, metadata=metadata)&#10;&#10;&#10;&#10;    egg_path = &quot;/path/to/PackageName-ver-pyver-etc.egg&quot;&#10;    metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))&#10;    dist = Distribution.from_filename(egg_path, metadata=metadata)" ilk="class" line="1977" lineend="1999" name="PathMetadata"><scope attributes="__ctor__" ilk="function" line="1997" lineend="1999" name="__init__" signature="PathMetadata(path, egg_info)"><variable citdl="PathMetadata" ilk="argument" line="1997" name="self" /><variable ilk="argument" line="1997" name="path" /><variable ilk="argument" line="1997" name="egg_info" /></scope><variable attributes="__instancevar__" line="1998" name="module_path" /><variable attributes="__instancevar__" line="1999" name="egg_info" /></scope><scope classrefs="ZipProvider" doc="Metadata provider for .egg files" ilk="class" line="2002" lineend="2014" name="EggMetadata"><scope attributes="__ctor__" doc="Create a metadata provider from a zipimporter" ilk="function" line="2005" lineend="2014" name="__init__" signature="EggMetadata(importer)"><variable citdl="EggMetadata" ilk="argument" line="2005" name="self" /><variable ilk="argument" line="2005" name="importer" /></scope><variable attributes="__instancevar__" line="2008" name="zip_pre" /><variable attributes="__instancevar__" line="2009" name="loader" /><variable attributes="__instancevar__" citdl="os.path.join()" line="2011" name="module_path" /></scope><scope doc="Register `distribution_finder` to find distributions in sys.path items&#10;&#10;`importer_type` is the type or class of a PEP 302 &quot;Importer&quot; (sys.path item&#10;handler), and `distribution_finder` is a callable that, passed a path&#10;item and the importer instance, yields ``Distribution`` instances found on&#10;that path item.  See ``pkg_resources.find_on_path`` for an example." ilk="function" line="2018" lineend="2025" name="register_finder" signature="register_finder(importer_type, distribution_finder)"><variable ilk="argument" line="2018" name="importer_type" /><variable ilk="argument" line="2018" name="distribution_finder" /></scope><scope doc="Yield distributions accessible via `path_item`" ilk="function" line="2028" lineend="2032" name="find_distributions" returns="find_distributions.finder()" signature="find_distributions(path_item, only=False)"><variable ilk="argument" line="2028" name="path_item" /><variable citdl="False" ilk="argument" line="2028" name="only" /><variable citdl="get_importer()" line="2030" name="importer" /><variable citdl="_find_adapter()" line="2031" name="finder" /></scope><scope doc="Find eggs in zip files; possibly multiple nested eggs." ilk="function" line="2034" lineend="2052" name="find_eggs_in_zip" signature="find_eggs_in_zip(importer, path_item, only=False)"><variable ilk="argument" line="2034" name="importer" /><variable ilk="argument" line="2034" name="path_item" /><variable citdl="False" ilk="argument" line="2034" name="only" /><variable citdl="EggMetadata" line="2042" name="metadata" /><variable line="2048" name="subitem" /><variable citdl="os.path.join()" line="2050" name="subpath" /><variable line="2051" name="dist" /></scope><scope ilk="function" line="2056" lineend="2057" name="find_nothing" returns="tuple" signature="find_nothing(importer, path_item, only=False)"><variable ilk="argument" line="2056" name="importer" /><variable ilk="argument" line="2056" name="path_item" /><variable citdl="False" ilk="argument" line="2056" name="only" /></scope><scope doc="Yield distributions accessible on a sys.path directory" ilk="function" line="2060" lineend="2100" name="find_on_path" signature="find_on_path(importer, path_item, only=False)"><variable ilk="argument" line="2060" name="importer" /><variable citdl="_normalize_cached()" ilk="argument" line="2060" name="path_item" /><variable citdl="False" ilk="argument" line="2060" name="only" /><variable line="2074" name="entry" /><variable citdl="entry.lower()" line="2075" name="lower" /><variable citdl="os.path.join()" line="2077" name="fullpath" /><variable citdl="PathMetadata" line="2080" name="metadata" /><variable citdl="find_distributions()" line="2087" name="dists" /><variable line="2088" name="dist" /><variable citdl="entry_file.readlines()" line="2092" name="entry_lines" /><variable line="2093" name="line" /><variable citdl="os.path.join()" line="2096" name="path" /><variable line="2098" name="item" /></scope><scope doc="Register `namespace_handler` to declare namespace packages&#10;&#10;`importer_type` is the type or class of a PEP 302 &quot;Importer&quot; (sys.path item&#10;handler), and `namespace_handler` is a callable like this::&#10;&#10;    def namespace_handler(importer, path_entry, moduleName, module):&#10;&#10;&#10;Namespace handlers are only called if the importer object has already&#10;agreed that it can handle the relevant path item, and they should only&#10;return a subpath if the module __path__ does not already contain an&#10;equivalent subpath.  For an example namespace handler, see&#10;``pkg_resources.file_ns_handler``." ilk="function" line="2110" lineend="2125" name="register_namespace_handler" signature="register_namespace_handler(importer_type, namespace_handler)"><variable ilk="argument" line="2110" name="importer_type" /><variable ilk="argument" line="2110" name="namespace_handler" /></scope><scope attributes="protected" doc="Ensure that named package includes a subpath of path_item (if needed)" ilk="function" line="2127" lineend="2152" name="_handle_ns" returns="handler()" signature="_handle_ns(packageName, path_item)"><variable ilk="argument" line="2127" name="packageName" /><variable ilk="argument" line="2127" name="path_item" /><variable citdl="get_importer()" line="2130" name="importer" /><variable citdl="importer.find_module()" line="2133" name="loader" /><variable citdl="sys.modules.get()" line="2136" name="module" /><variable citdl="_find_adapter()" line="2143" name="handler" /><variable citdl="handler()" line="2144" name="subpath" /><variable citdl="list" line="2146" name="path" /></scope><scope doc="Declare that package 'packageName' is a namespace package" ilk="function" line="2154" lineend="2184" name="declare_namespace" signature="declare_namespace(packageName)"><variable ilk="argument" line="2154" name="packageName" /><variable citdl="sys.path" line="2162" name="path" /><variable citdl="__builtins__.str.join()" line="2162" name="parent" /><variable line="2178" name="path_item" /></scope><scope doc="Ensure that previously-declared namespace packages include path_item" ilk="function" line="2186" lineend="2195" name="fixup_namespace_packages" signature="fixup_namespace_packages(path_item, parent=None)"><variable ilk="argument" line="2186" name="path_item" /><variable ilk="argument" line="2186" name="parent" /><variable line="2190" name="package" /><variable citdl="_handle_ns()" line="2191" name="subpath" /></scope><scope doc="Compute an ns-package subpath for a filesystem or zipfile importer" ilk="function" line="2197" lineend="2207" name="file_ns_handler" returns="os.path.join()" signature="file_ns_handler(importer, path_item, packageName, module)"><variable ilk="argument" line="2197" name="importer" /><variable ilk="argument" line="2197" name="path_item" /><variable ilk="argument" line="2197" name="packageName" /><variable ilk="argument" line="2197" name="module" /><variable citdl="os.path.join()" line="2200" name="subpath" /><variable citdl="_normalize_cached()" line="2201" name="normalized" /><variable line="2202" name="item" /></scope><scope ilk="function" line="2216" lineend="2217" name="null_ns_handler" signature="null_ns_handler(importer, path_item, packageName, module)"><variable ilk="argument" line="2216" name="importer" /><variable ilk="argument" line="2216" name="path_item" /><variable ilk="argument" line="2216" name="packageName" /><variable ilk="argument" line="2216" name="module" /></scope><scope doc="Normalize a file/dir name for comparison purposes" ilk="function" line="2222" lineend="2224" name="normalize_path" returns="os.path.normcase()" signature="normalize_path(filename)"><variable ilk="argument" line="2222" name="filename" /></scope><scope attributes="protected" ilk="function" line="2226" lineend="2231" name="_normalize_cached" returns="result" signature="_normalize_cached(filename, _cache={})"><variable ilk="argument" line="2226" name="filename" /><variable citdl="dict" ilk="argument" line="2226" name="_cache" /></scope><scope attributes="protected" ilk="function" line="2233" lineend="2238" name="_set_parent_ns" signature="_set_parent_ns(packageName)"><variable ilk="argument" line="2233" name="packageName" /><variable citdl="packageName.split()" line="2234" name="parts" /><variable citdl="parts.pop()" line="2235" name="name" /><variable citdl="__builtins__.str.join()" line="2237" name="parent" /></scope><scope doc="Yield non-empty/non-comment lines of a string or sequence" ilk="function" line="2241" lineend="2252" name="yield_lines" signature="yield_lines(strs)"><variable ilk="argument" line="2241" name="strs" /><variable citdl="s.strip()" line="2244" name="s" /><variable line="2250" name="ss" /></scope><variable line="2255" name="LINE_END" /><variable line="2257" name="CONTINUE" /><variable line="2259" name="DISTRO" /><variable line="2261" name="VERSION" /><variable line="2263" name="COMMA" /><variable line="2264" name="OBRACKET" /><variable line="2265" name="CBRACKET" /><variable line="2266" name="MODULE" /><variable line="2267" name="EGG_NAME" /><scope classrefs="object" doc="Object representing an advertised importable object" ilk="class" line="2274" lineend="2380" name="EntryPoint"><scope attributes="__ctor__" ilk="function" line="2277" lineend="2284" name="__init__" signature="EntryPoint(name, module_name, attrs=(), extras=(), dist=None)"><variable citdl="EntryPoint" ilk="argument" line="2277" name="self" /><variable ilk="argument" line="2277" name="name" /><variable ilk="argument" line="2277" name="module_name" /><variable citdl="tuple" ilk="argument" line="2277" name="attrs" /><variable citdl="tuple" ilk="argument" line="2277" name="extras" /><variable ilk="argument" line="2277" name="dist" /></scope><variable attributes="__instancevar__" line="2280" name="name" /><variable attributes="__instancevar__" line="2281" name="module_name" /><variable attributes="__instancevar__" citdl="tuple()" line="2282" name="attrs" /><variable attributes="__instancevar__" line="2283" name="extras" /><variable attributes="__instancevar__" line="2284" name="dist" /><scope ilk="function" line="2286" lineend="2292" name="__str__" signature="__str__()"><variable citdl="EntryPoint" ilk="argument" line="2286" name="self" /><variable line="2287" name="s" /></scope><scope ilk="function" line="2294" lineend="2295" name="__repr__" signature="__repr__()"><variable citdl="EntryPoint" ilk="argument" line="2294" name="self" /></scope><scope doc="Require packages for this EntryPoint, then resolve it." ilk="function" line="2297" lineend="2310" name="load" returns="self.resolve()" signature="load(**require)"><variable attributes="varargs" citdl="EntryPoint" ilk="argument" line="2297" name="self" /><variable attributes="kwargs" ilk="argument" line="2297" name="require" /></scope><scope doc="Resolve the entry point from its module and attrs." ilk="function" line="2312" lineend="2320" name="resolve" returns="functools.reduce()" signature="resolve()"><variable citdl="EntryPoint" ilk="argument" line="2312" name="self" /><variable citdl="__import__()" line="2316" name="module" /></scope><scope ilk="function" line="2322" lineend="2327" name="require" signature="require(env=None, installer=None)"><variable citdl="EntryPoint" ilk="argument" line="2322" name="self" /><variable ilk="argument" line="2322" name="env" /><variable ilk="argument" line="2322" name="installer" /><variable citdl="self.dist.requires()" line="2325" name="reqs" /><variable citdl="working_set.resolve()" line="2326" name="items" /></scope><variable citdl="re.compile()" line="2329" name="pattern" /><scope attributes="__classmethod__" doc="Parse a single entry point from string `src`&#10;&#10;Entry point syntax follows the form::&#10;&#10;    name = some.module:some.attr [extra1, extra2]&#10;&#10;The entry name and module name are required, but the ``:attrs`` and&#10;``[extras]`` parts are optional" ilk="function" line="2338" lineend="2338" name="parse" returns="EntryPoint.parse.cls()" signature="parse(src, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2338" name="cls" /><variable ilk="argument" line="2338" name="src" /><variable ilk="argument" line="2338" name="dist" /><variable citdl="cls.pattern.match()" line="2349" name="m" /><variable citdl="str" line="2351" name="msg" /><variable citdl="m.groupdict()" line="2353" name="res" /><variable citdl="cls._parse_extras()" line="2354" name="extras" /><variable line="2355" name="attrs" /></scope><scope attributes="protected __classmethod__" ilk="function" line="2358" lineend="2358" name="_parse_extras" returns="tuple" signature="_parse_extras(extras_spec) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2358" name="cls" /><variable ilk="argument" line="2358" name="extras_spec" /><variable citdl="Requirement.parse()" line="2362" name="req" /></scope><scope attributes="__classmethod__" doc="Parse an entry point group" ilk="function" line="2367" lineend="2367" name="parse_group" returns="dict" signature="parse_group(group, lines, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2367" name="cls" /><variable ilk="argument" line="2367" name="group" /><variable ilk="argument" line="2367" name="lines" /><variable ilk="argument" line="2367" name="dist" /><variable citdl="dict" line="2372" name="this" /><variable line="2373" name="line" /><variable citdl="parse()" line="2374" name="ep" /></scope><scope attributes="__classmethod__" doc="Parse a map of entry point groups" ilk="function" line="2380" lineend="2380" name="parse_map" returns="dict" signature="parse_map(data, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2380" name="cls" /><variable citdl="split_sections()" ilk="argument" line="2380" name="data" /><variable ilk="argument" line="2380" name="dist" /><variable citdl="dict" line="2387" name="maps" /><variable citdl="group.strip()" line="2388" name="group" /><variable line="2388" name="lines" /></scope></scope><scope attributes="protected" ilk="function" line="2400" lineend="2406" name="_remove_md5_fragment" returns="str" signature="_remove_md5_fragment(location)"><variable ilk="argument" line="2400" name="location" /><variable citdl="urlparse()" line="2403" name="parsed" /></scope><scope classrefs="object" doc="Wrap an actual or potential sys.path entry w/metadata" ilk="class" line="2409" lineend="2726" name="Distribution"><variable citdl="str" line="2411" name="PKG_INFO" /><scope attributes="__ctor__" ilk="function" line="2413" lineend="2423" name="__init__" signature="Distribution(location=None, metadata=None, project_name=None, version=None, py_version=PY_MAJOR, platform=None, precedence=EGG_DIST)"><variable citdl="Distribution" ilk="argument" line="2413" name="self" /><variable ilk="argument" line="2413" name="location" /><variable ilk="argument" line="2413" name="metadata" /><variable ilk="argument" line="2413" name="project_name" /><variable ilk="argument" line="2413" name="version" /><variable ilk="argument" line="2413" name="py_version" /><variable ilk="argument" line="2413" name="platform" /><variable citdl="int" ilk="argument" line="2413" name="precedence" /></scope><variable attributes="__instancevar__" citdl="safe_name()" line="2416" name="project_name" /><variable attributes="protected __instancevar__" citdl="safe_version()" line="2418" name="_version" /><variable attributes="__instancevar__" line="2419" name="py_version" /><variable attributes="__instancevar__" line="2420" name="platform" /><variable attributes="__instancevar__" line="2421" name="location" /><variable attributes="__instancevar__" citdl="int" line="2422" name="precedence" /><variable attributes="protected __instancevar__" citdl="EmptyProvider" line="2423" name="_provider" /><scope attributes="__classmethod__" ilk="function" line="2425" lineend="2425" name="from_location" returns="Distribution.from_location.cls()" signature="from_location(location, basename=None, **metadata) - classmethod"><variable citdl="Distribution" ilk="argument" line="2425" name="cls" /><variable ilk="argument" line="2425" name="location" /><variable ilk="argument" line="2425" name="basename" /><variable attributes="kwargs" ilk="argument" line="2425" name="metadata" /><variable line="2428" name="ext" /><variable citdl="EGG_NAME()" line="2431" name="match" /><variable line="2433" name="version" /><variable line="2433" name="project_name" /><variable line="2433" name="py_version" /><variable line="2433" name="platform" /></scope><variable attributes="property" citdl="tuple" line="2442" name="hashcmp" /><scope attributes="__hidden__" ilk="function" line="2442" lineend="2442" name="hashcmp (property getter)" returns="tuple" signature="hashcmp (property getter)()"><variable citdl="Distribution" ilk="argument" line="2442" name="self" /></scope><scope ilk="function" line="2453" lineend="2454" name="__hash__" returns="hash()" signature="__hash__()"><variable citdl="Distribution" ilk="argument" line="2453" name="self" /></scope><scope ilk="function" line="2456" lineend="2457" name="__lt__" returns="bool" signature="__lt__(other)"><variable citdl="Distribution" ilk="argument" line="2456" name="self" /><variable ilk="argument" line="2456" name="other" /></scope><scope ilk="function" line="2459" lineend="2460" name="__le__" returns="bool" signature="__le__(other)"><variable citdl="Distribution" ilk="argument" line="2459" name="self" /><variable ilk="argument" line="2459" name="other" /></scope><scope ilk="function" line="2462" lineend="2463" name="__gt__" returns="bool" signature="__gt__(other)"><variable citdl="Distribution" ilk="argument" line="2462" name="self" /><variable ilk="argument" line="2462" name="other" /></scope><scope ilk="function" line="2465" lineend="2466" name="__ge__" returns="bool" signature="__ge__(other)"><variable citdl="Distribution" ilk="argument" line="2465" name="self" /><variable ilk="argument" line="2465" name="other" /></scope><scope ilk="function" line="2468" lineend="2472" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="Distribution" ilk="argument" line="2468" name="self" /><variable ilk="argument" line="2468" name="other" /></scope><scope ilk="function" line="2474" lineend="2475" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="Distribution" ilk="argument" line="2474" name="self" /><variable ilk="argument" line="2474" name="other" /></scope><variable attributes="property" citdl="self._key" line="2481" name="key" /><scope attributes="__hidden__" ilk="function" line="2481" lineend="2481" name="key (property getter)" returns="self._key" signature="key (property getter)()"><variable citdl="Distribution" ilk="argument" line="2481" name="self" /></scope><variable attributes="protected __instancevar__" citdl="self.project_name.lower()" line="2486" name="_key" /><variable attributes="property" citdl="parse_version()" line="2489" name="parsed_version" /><scope attributes="__hidden__" ilk="function" line="2489" lineend="2489" name="parsed_version (property getter)" returns="parse_version()" signature="parsed_version (property getter)()"><variable citdl="Distribution" ilk="argument" line="2489" name="self" /></scope><variable attributes="protected __instancevar__" citdl="parse_version()" line="2492" name="_parsed_version" /><scope attributes="__hidden__" ilk="function" line="2515" lineend="2515" name="version (property getter)" returns="safe_version()" signature="version (property getter)()"><variable citdl="Distribution" ilk="argument" line="2515" name="self" /><variable line="2520" name="line" /><variable citdl="str" line="2525" name="tmpl" /></scope><variable attributes="property" citdl="safe_version()" line="2515" name="version" /><variable attributes="property protected" citdl="self.__dep_map" line="2528" name="_dep_map" /><scope attributes="protected __hidden__" ilk="function" line="2528" lineend="2528" name="_dep_map (property getter)" returns="dict" signature="_dep_map (property getter)()"><variable citdl="Distribution" ilk="argument" line="2528" name="self" /><variable citdl="dict" line="2533" name="dm" /><variable line="2534" name="name" /><variable citdl="safe_extra()" line="2535" name="extra" /><variable citdl="list" line="2535" name="reqs" /><variable line="2538" name="marker" /></scope><scope doc="List of Requirements needed for this distro if `extras` are used" ilk="function" line="2548" lineend="2560" name="requires" returns="list" signature="requires(extras=())"><variable citdl="Distribution" ilk="argument" line="2548" name="self" /><variable citdl="tuple" ilk="argument" line="2548" name="extras" /><variable citdl="self.__dep_map" line="2550" name="dm" /><variable citdl="list" line="2551" name="deps" /><variable line="2553" name="ext" /></scope><scope attributes="protected" ilk="function" line="2562" lineend="2565" name="_get_metadata" signature="_get_metadata(name)"><variable citdl="Distribution" ilk="argument" line="2562" name="self" /><variable ilk="argument" line="2562" name="name" /><variable line="2564" name="line" /></scope><scope doc="Ensure distribution is importable on `path` (default=sys.path)" ilk="function" line="2567" lineend="2576" name="activate" signature="activate(path=None)"><variable citdl="Distribution" ilk="argument" line="2567" name="self" /><variable citdl="sys.path" ilk="argument" line="2567" name="path" /><variable line="2574" name="pkg" /></scope><scope doc="Return what this distribution's standard .egg filename should be" ilk="function" line="2578" lineend="2587" name="egg_name" signature="egg_name()"><variable citdl="Distribution" ilk="argument" line="2578" name="self" /><variable line="2580" name="filename" /></scope><scope ilk="function" line="2589" lineend="2593" name="__repr__" returns="str()" signature="__repr__()"><variable citdl="Distribution" ilk="argument" line="2589" name="self" /></scope><scope ilk="function" line="2595" lineend="2601" name="__str__" signature="__str__()"><variable citdl="Distribution" ilk="argument" line="2595" name="self" /><variable citdl="getattr()" line="2597" name="version" /></scope><scope doc="Delegate all unrecognized public attributes to .metadata provider" ilk="function" line="2603" lineend="2607" name="__getattr__" returns="getattr()" signature="__getattr__(attr)"><variable citdl="Distribution" ilk="argument" line="2603" name="self" /><variable ilk="argument" line="2603" name="attr" /></scope><scope attributes="__classmethod__" ilk="function" line="2609" lineend="2609" name="from_filename" returns="Distribution.from_location()" signature="from_filename(filename=None, **metadata) - classmethod"><variable citdl="Distribution" ilk="argument" line="2609" name="cls" /><variable ilk="argument" line="2609" name="filename" /><variable attributes="kwargs" ilk="argument" line="2609" name="metadata" /></scope><scope doc="Return a ``Requirement`` that matches this distribution exactly" ilk="function" line="2616" lineend="2623" name="as_requirement" returns="Requirement.parse()" signature="as_requirement()"><variable citdl="Distribution" ilk="argument" line="2616" name="self" /><variable line="2619" name="spec" /></scope><scope doc="Return the `name` entry point of `group` or raise ImportError" ilk="function" line="2625" lineend="2630" name="load_entry_point" returns="ep.load()" signature="load_entry_point(group, name)"><variable citdl="Distribution" ilk="argument" line="2625" name="self" /><variable ilk="argument" line="2625" name="group" /><variable ilk="argument" line="2625" name="name" /><variable citdl="self.get_entry_info()" line="2627" name="ep" /></scope><scope doc="Return the entry point map for `group`, or the full entry map" ilk="function" line="2632" lineend="2642" name="get_entry_map" returns="ep_map.get()" signature="get_entry_map(group=None)"><variable citdl="Distribution" ilk="argument" line="2632" name="self" /><variable ilk="argument" line="2632" name="group" /><variable citdl="EntryPoint.parse_map()" line="2635" name="ep_map" /></scope><scope doc="Return the EntryPoint object for `group`+`name`, or ``None``" ilk="function" line="2644" lineend="2646" name="get_entry_info" signature="get_entry_info(group, name)"><variable citdl="Distribution" ilk="argument" line="2644" name="self" /><variable ilk="argument" line="2644" name="group" /><variable ilk="argument" line="2644" name="name" /></scope><scope doc="Insert self.location in path before its nearest parent directory" ilk="function" line="2648" lineend="2686" name="insert_on" signature="insert_on(path, loc=None)"><variable citdl="Distribution" ilk="argument" line="2648" name="self" /><variable ilk="argument" line="2648" name="path" /><variable ilk="argument" line="2648" name="loc" /><variable citdl="_normalize_cached()" line="2655" name="nloc" /><variable citdl="os.path.dirname()" line="2656" name="bdir" /><variable citdl="list" line="2657" name="npath" /><variable citdl="npath.index()" line="2659" name="p" /><variable line="2659" name="item" /><variable citdl="npath.index()" line="2678" name="np" /></scope><scope ilk="function" line="2688" lineend="2707" name="check_version_conflict" signature="check_version_conflict()"><variable citdl="Distribution" ilk="argument" line="2688" name="self" /><variable citdl="dict.fromkeys()" line="2693" name="nsp" /><variable citdl="normalize_path()" line="2694" name="loc" /><variable line="2695" name="modname" /><variable citdl="getattr()" line="2701" name="fn" /></scope><scope ilk="function" line="2710" lineend="2716" name="has_version" returns="bool" signature="has_version()"><variable citdl="Distribution" ilk="argument" line="2710" name="self" /></scope><scope doc="Copy this distribution, substituting in any changed keyword args" ilk="function" line="2718" lineend="2724" name="clone" returns="self.__class__()" signature="clone()"><variable attributes="kwargs" citdl="Distribution" ilk="argument" line="2718" name="self" /><variable citdl="str" line="2720" name="names" /><variable line="2721" name="attr" /></scope><scope attributes="__hidden__" ilk="function" line="2726" lineend="2726" name="extras (property getter)" returns="list" signature="extras (property getter)()"><variable citdl="Distribution" ilk="argument" line="2726" name="self" /></scope><variable attributes="property" citdl="list" line="2726" name="extras" /></scope><scope classrefs="Distribution" doc="Wrap an actual or potential sys.path entry w/metadata, .dist-info style" ilk="class" line="2731" lineend="2791" name="DistInfoDistribution"><variable citdl="str" line="2733" name="PKG_INFO" /><variable citdl="re.compile()" line="2734" name="EQEQ" /><variable attributes="property protected" citdl="self._pkg_info" line="2736" name="_parsed_pkg_info" /><scope attributes="protected __hidden__" doc="Parse and cache metadata" ilk="function" line="2736" lineend="2736" name="_parsed_pkg_info (property getter)" returns="self._pkg_info" signature="_parsed_pkg_info (property getter)()"><variable citdl="DistInfoDistribution" ilk="argument" line="2736" name="self" /><variable citdl="self.get_metadata()" line="2742" name="metadata" /></scope><variable attributes="protected __instancevar__" line="2743" name="_pkg_info" /><variable attributes="property protected" citdl="self._compute_dependencies()" line="2746" name="_dep_map" /><scope attributes="protected __hidden__" ilk="function" line="2746" lineend="2746" name="_dep_map (property getter)" returns="self.__dep_map" signature="_dep_map (property getter)()"><variable citdl="DistInfoDistribution" ilk="argument" line="2746" name="self" /></scope><variable attributes="private __instancevar__" citdl="self._compute_dependencies()" line="2751" name="__dep_map" /><scope attributes="protected" doc="Convert 'Foobar (1); baz' to ('Foobar ==1', 'baz')&#10;Split environment marker, add == prefix to version specifiers as&#10;necessary, and remove parenthesis." ilk="function" line="2754" lineend="2764" name="_preparse_requirement" returns="tuple" signature="_preparse_requirement(requires_dist)"><variable citdl="DistInfoDistribution" ilk="argument" line="2754" name="self" /><variable ilk="argument" line="2754" name="requires_dist" /><variable line="2759" name="parts" /><variable citdl="re.sub()" line="2760" name="distvers" /><variable line="2761" name="mark" /></scope><scope attributes="protected" doc="Recompute this distribution's dependencies." ilk="function" line="2766" lineend="2791" name="_compute_dependencies" returns="dict" signature="_compute_dependencies()"><import alias="compile_marker" line="2768" module="_markerlib" symbol="compile" /><variable citdl="DistInfoDistribution" ilk="argument" line="2766" name="self" /><variable citdl="dict" line="2769" name="dm" /><variable citdl="list" line="2771" name="reqs" /><variable line="2773" name="req" /><variable line="2774" name="distvers" /><variable line="2774" name="mark" /><variable citdl="next()" line="2775" name="parsed" /><scope ilk="function" line="2779" lineend="2782" name="reqs_for_extra" signature="reqs_for_extra(extra)"><variable ilk="argument" line="2779" name="extra" /><variable line="2780" name="req" /></scope><variable citdl="frozenset()" line="2784" name="common" /><variable citdl="safe_extra()" line="2787" name="extra" /></scope></scope><variable attributes="protected" citdl="dict" line="2794" name="_distributionImpl" /><scope ilk="function" line="2801" lineend="2811" name="issue_warning" signature="issue_warning()"><variable citdl="int" line="2802" name="level" /><variable citdl="globals()" line="2803" name="g" /></scope><scope doc="Yield ``Requirement`` objects for each specification in `strs`&#10;&#10;`strs` must be a string, or a (possibly-nested) iterable thereof." ilk="function" line="2814" lineend="2876" name="parse_requirements" signature="parse_requirements(strs)"><variable ilk="argument" line="2814" name="strs" /><variable citdl="iter()" line="2820" name="lines" /><scope ilk="function" line="2822" lineend="2856" name="scan_list" returns="tuple" signature="scan_list(ITEM, TERMINATOR, line, p, groups, item_name)"><variable ilk="argument" line="2822" name="ITEM" /><variable ilk="argument" line="2822" name="TERMINATOR" /><variable citdl="next()" ilk="argument" line="2822" name="line" /><variable citdl="match.end()" ilk="argument" line="2822" name="p" /><variable ilk="argument" line="2822" name="groups" /><variable ilk="argument" line="2822" name="item_name" /><variable citdl="list" line="2824" name="items" /><variable citdl="ITEM()" line="2836" name="match" /><variable citdl="str" line="2838" name="msg" /></scope><variable line="2858" name="line" /><variable citdl="OBRACKET()" line="2859" name="match" /><variable citdl="match.group()" line="2862" name="project_name" /><variable citdl="match.end()" line="2863" name="p" /><variable citdl="list" line="2864" name="extras" /><variable citdl="list" line="2873" name="specs" /></scope><scope ilk="class" line="2879" lineend="2925" name="Requirement"><scope attributes="__ctor__" doc="DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!" ilk="function" line="2880" lineend="2894" name="__init__" signature="Requirement(project_name, specs, extras)"><variable citdl="Requirement" ilk="argument" line="2880" name="self" /><variable citdl="safe_name()" ilk="argument" line="2880" name="project_name" /><variable ilk="argument" line="2880" name="specs" /><variable ilk="argument" line="2880" name="extras" /></scope><variable attributes="__instancevar__" line="2882" name="unsafe_name" /><variable attributes="__instancevar__" citdl="project_name.lower()" line="2883" name="key" /><variable attributes="__instancevar__" citdl="safe_name()" line="2883" name="project_name" /><variable attributes="__instancevar__" citdl="packaging.specifiers.SpecifierSet()" line="2884" name="specifier" /><variable attributes="__instancevar__" line="2887" name="specs" /><variable attributes="__instancevar__" citdl="tuple()" line="2888" name="extras" /><variable attributes="__instancevar__" citdl="tuple" line="2889" name="hashCmp" /><variable attributes="private __instancevar__" citdl="hash()" line="2894" name="__hash" /><scope ilk="function" line="2896" lineend="2900" name="__str__" signature="__str__()"><variable citdl="Requirement" ilk="argument" line="2896" name="self" /><variable citdl="__builtins__.str.join()" line="2897" name="extras" /></scope><scope ilk="function" line="2902" lineend="2905" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="Requirement" ilk="argument" line="2902" name="self" /><variable ilk="argument" line="2902" name="other" /></scope><scope ilk="function" line="2908" lineend="2918" name="__contains__" returns="bool" signature="__contains__(item)"><variable citdl="Requirement" ilk="argument" line="2908" name="self" /><variable citdl="item.version" ilk="argument" line="2908" name="item" /></scope><scope ilk="function" line="2920" lineend="2921" name="__hash__" returns="hash()" signature="__hash__()"><variable citdl="Requirement" ilk="argument" line="2920" name="self" /></scope><scope ilk="function" line="2923" lineend="2923" name="__repr__" signature="__repr__()"><variable citdl="Requirement" ilk="argument" line="2923" name="self" /></scope><scope attributes="__staticmethod__" ilk="function" line="2925" lineend="2925" name="parse" signature="parse(s) - staticmethod"><variable citdl="Requirement" ilk="argument" line="2925" name="s" /><variable citdl="list()" line="2927" name="reqs" /></scope></scope><scope attributes="protected" doc="Get an mro for a type or classic class" ilk="function" line="2935" lineend="2940" name="_get_mro" returns="cls.__mro__" signature="_get_mro(cls)"><variable ilk="argument" line="2935" name="cls" /></scope><scope attributes="protected" doc="Return an adapter factory for `ob` from `registry`" ilk="function" line="2942" lineend="2946" name="_find_adapter" signature="_find_adapter(registry, ob)"><variable ilk="argument" line="2942" name="registry" /><variable ilk="argument" line="2942" name="ob" /><variable line="2944" name="t" /></scope><scope doc="Ensure that the parent directory of `path` exists" ilk="function" line="2949" lineend="2953" name="ensure_directory" signature="ensure_directory(path)"><variable ilk="argument" line="2949" name="path" /><variable citdl="os.path.dirname()" line="2951" name="dirname" /></scope><scope attributes="protected" doc="Sandbox-bypassing version of ensure_directory()" ilk="function" line="2956" lineend="2963" name="_bypass_ensure_directory" signature="_bypass_ensure_directory(path, mode=511)"><variable ilk="argument" line="2956" name="path" /><variable citdl="int" ilk="argument" line="2956" name="mode" /><variable line="2960" name="filename" /><variable line="2960" name="dirname" /></scope><scope doc="Split a string or iterable thereof into (section, content) pairs&#10;&#10;Each ``section`` is a stripped version of the section header (&quot;[section]&quot;)&#10;and each ``content`` is a list of stripped lines excluding blank lines and&#10;comment-only lines.  If there are any such lines before the first section&#10;header, they're returned in a first ``section`` of ``None``." ilk="function" line="2966" lineend="2989" name="split_sections" signature="split_sections(s)"><variable ilk="argument" line="2966" name="s" /><variable line="2974" name="section" /><variable citdl="list" line="2975" name="content" /><variable line="2976" name="line" /></scope><scope attributes="protected" ilk="function" line="2991" lineend="2999" name="_mkstemp" returns="tempfile.mkstemp()" signature="_mkstemp()"><variable citdl="os.open" line="2992" name="old_open" /></scope><variable attributes="protected" citdl="ResourceManager" line="3010" name="_manager" /><scope attributes="protected" ilk="function" line="3011" lineend="3014" name="_initialize" signature="_initialize(g)"><variable ilk="argument" line="3011" name="g" /><variable line="3012" name="name" /></scope><variable citdl="WorkingSet._build_master()" line="3018" name="working_set" /><variable citdl="working_set.require" line="3021" name="require" /><variable citdl="working_set.iter_entry_points" line="3022" name="iter_entry_points" /><variable citdl="working_set.subscribe" line="3023" name="add_activation_listener" /></scope>