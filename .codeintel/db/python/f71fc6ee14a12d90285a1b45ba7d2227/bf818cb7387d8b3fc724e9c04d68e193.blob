<scope doc="Package resource API --------------------" ilk="blob" lang="Python" name="__init__" src="C:\Python27\lib\site-packages\pkg_resources\__init__.py"><import line="17" module="__future__" symbol="absolute_import" /><import line="19" module="sys" /><import line="20" module="os" /><import line="21" module="io" /><import line="22" module="time" /><import line="23" module="re" /><import line="24" module="types" /><import line="25" module="zipfile" /><import line="26" module="zipimport" /><import line="27" module="warnings" /><import line="28" module="stat" /><import line="29" module="functools" /><import line="30" module="pkgutil" /><import line="31" module="token" /><import line="32" module="symbol" /><import line="33" module="operator" /><import line="34" module="platform" /><import line="35" module="collections" /><import line="36" module="plistlib" /><import line="37" module="email.parser" /><import line="38" module="tempfile" /><import line="39" module="textwrap" /><import line="40" module="pkgutil" symbol="get_importer" /><import line="43" module="_imp" /><import alias="_imp" line="46" module="imp" /><import line="52" module="urllib.parse" symbol="urlparse" /><import line="52" module="urllib.parse" symbol="urlunparse" /><import line="55" module="urlparse" symbol="urlparse" /><import line="55" module="urlparse" symbol="urlunparse" /><import line="65" module="os" symbol="utime" /><import line="67" module="os" symbol="mkdir" /><import line="67" module="os" symbol="rename" /><import line="67" module="os" symbol="unlink" /><import alias="os_open" line="73" module="os" symbol="open" /><import line="74" module="os.path" symbol="isdir" /><import line="74" module="os.path" symbol="split" /><import alias="importlib_machinery" line="78" module="importlib.machinery" /><import line="83" module="parser" /><import line="88" module="pkg_resources._vendor.packaging.version" /><import line="89" module="pkg_resources._vendor.packaging.specifiers" /><import line="94" module="packaging.version" /><import line="95" module="packaging.specifiers" /><variable citdl="bool" line="48" name="PY3" /><variable citdl="bool" line="49" name="PY2" /><variable citdl="tuple" line="58" name="string_types" /><variable line="62" name="iteritems" /><variable citdl="False" line="68" name="WRITE_SUPPORT" /><variable line="80" name="importlib_machinery" /><variable citdl="pkg_resources._vendor.packaging" line="90" name="packaging" /><variable line="100" name="require" /><variable line="101" name="working_set" /><scope classrefs="RuntimeWarning" doc="Used when there is an issue with a version or specifier not complying with&#10;PEP 440." ilk="class" line="104" lineend="108" name="PEP440Warning" /><scope attributes="protected" classrefs="object" ilk="class" line="111" lineend="207" name="_SetuptoolsVersionMixin"><scope ilk="function" line="113" lineend="114" name="__hash__" signature="__hash__()"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="113" name="self" /></scope><scope ilk="function" line="116" lineend="120" name="__lt__" returns="bool" signature="__lt__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="116" name="self" /><variable ilk="argument" line="116" name="other" /></scope><scope ilk="function" line="122" lineend="126" name="__le__" returns="bool" signature="__le__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="122" name="self" /><variable ilk="argument" line="122" name="other" /></scope><scope ilk="function" line="128" lineend="132" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="128" name="self" /><variable ilk="argument" line="128" name="other" /></scope><scope ilk="function" line="134" lineend="138" name="__ge__" returns="bool" signature="__ge__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="134" name="self" /><variable ilk="argument" line="134" name="other" /></scope><scope ilk="function" line="140" lineend="144" name="__gt__" returns="bool" signature="__gt__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="140" name="self" /><variable ilk="argument" line="140" name="other" /></scope><scope ilk="function" line="146" lineend="150" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="146" name="self" /><variable ilk="argument" line="146" name="other" /></scope><scope ilk="function" line="152" lineend="153" name="__getitem__" signature="__getitem__(key)"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="152" name="self" /><variable ilk="argument" line="152" name="key" /></scope><scope ilk="function" line="155" lineend="207" name="__iter__" signature="__iter__()"><variable citdl="_SetuptoolsVersionMixin" ilk="argument" line="155" name="self" /><variable citdl="re.compile()" line="156" name="component_re" /><variable citdl="{}.get" line="157" name="replace" /><scope attributes="protected" ilk="function" line="165" lineend="177" name="_parse_version_parts" signature="_parse_version_parts(s)"><variable ilk="argument" line="165" name="s" /><variable citdl="replace()" line="166" name="part" /></scope><scope ilk="function" line="179" lineend="191" name="old_parse_version" returns="tuple()" signature="old_parse_version(s)"><variable ilk="argument" line="179" name="s" /><variable citdl="list" line="180" name="parts" /><variable line="181" name="part" /></scope><variable line="206" name="part" /></scope></scope><scope classrefs="_SetuptoolsVersionMixin packaging.version.Version" ilk="class" line="210" lineend="211" name="SetuptoolsVersion" /><scope classrefs="_SetuptoolsVersionMixin packaging.version.LegacyVersion" ilk="class" line="214" lineend="216" name="SetuptoolsLegacyVersion" /><scope ilk="function" line="219" lineend="223" name="parse_version" returns="SetuptoolsLegacyVersion" signature="parse_version(v)"><variable ilk="argument" line="219" name="v" /></scope><variable attributes="protected" citdl="dict" line="226" name="_state_vars" /><scope attributes="protected" ilk="function" line="228" lineend="230" name="_declare_state" signature="_declare_state(**vartype)"><variable attributes="kwargs" ilk="argument" line="228" name="vartype" /></scope><scope ilk="function" line="232" lineend="237" name="__getstate__" returns="dict" signature="__getstate__()"><variable citdl="dict" line="233" name="state" /><variable citdl="globals()" line="234" name="g" /><variable line="235" name="k" /><variable line="235" name="v" /></scope><scope ilk="function" line="239" lineend="243" name="__setstate__" signature="__setstate__(state)"><variable ilk="argument" line="239" name="state" /><variable citdl="globals()" line="240" name="g" /><variable line="241" name="k" /><variable line="241" name="v" /></scope><scope attributes="protected" ilk="function" line="245" lineend="246" name="_sget_dict" returns="val.copy()" signature="_sget_dict(val)"><variable ilk="argument" line="245" name="val" /></scope><scope attributes="protected" ilk="function" line="248" lineend="250" name="_sset_dict" signature="_sset_dict(key, ob, state)"><variable ilk="argument" line="248" name="key" /><variable ilk="argument" line="248" name="ob" /><variable ilk="argument" line="248" name="state" /></scope><scope attributes="protected" ilk="function" line="252" lineend="253" name="_sget_object" returns="val.__getstate__()" signature="_sget_object(val)"><variable ilk="argument" line="252" name="val" /></scope><scope attributes="protected" ilk="function" line="255" lineend="256" name="_sset_object" signature="_sset_object(key, ob, state)"><variable ilk="argument" line="255" name="key" /><variable ilk="argument" line="255" name="ob" /><variable ilk="argument" line="255" name="state" /></scope><variable attributes="protected" line="258" name="_sget_none" /><scope doc="Return this platform's maximum compatible version.&#10;&#10;distutils.util.get_platform() normally reports the minimum version&#10;of Mac OS X that would be required to *use* extensions produced by&#10;distutils.  But what we want when checking compatibility is to know the&#10;version of Mac OS X that we are *running*.  To allow usage of packages that&#10;explicitly require a newer version of Mac OS X, we must also know the&#10;current version of the OS.&#10;&#10;If this condition occurs for any other platform with a version in its&#10;platform strings, this function should be extended accordingly." ilk="function" line="261" lineend="282" name="get_supported_platform" returns="get_build_platform()" signature="get_supported_platform()"><variable citdl="get_build_platform()" line="274" name="plat" /><variable citdl="macosVersionString.match()" line="275" name="m" /></scope><variable citdl="list" line="284" name="__all__" /><scope classrefs="Exception" doc="Abstract base for dependency resolution errors" ilk="class" line="330" lineend="333" name="ResolutionError"><scope ilk="function" line="332" lineend="333" name="__repr__" signature="__repr__()"><variable citdl="ResolutionError" ilk="argument" line="332" name="self" /></scope></scope><scope classrefs="ResolutionError" doc="An already-installed version conflicts with the requested version.&#10;&#10;Should be initialized with the installed Distribution and the requested&#10;Requirement." ilk="class" line="336" lineend="365" name="VersionConflict"><variable attributes="protected" citdl="str" line="344" name="_template" /><scope attributes="__hidden__" ilk="function" line="346" lineend="346" name="dist (property getter)" signature="dist (property getter)()"><variable citdl="VersionConflict" ilk="argument" line="346" name="self" /></scope><variable attributes="property" line="346" name="dist" /><scope attributes="__hidden__" ilk="function" line="350" lineend="350" name="req (property getter)" signature="req (property getter)()"><variable citdl="VersionConflict" ilk="argument" line="350" name="self" /></scope><variable attributes="property" line="350" name="req" /><scope ilk="function" line="354" lineend="355" name="report" returns="self._template.format()" signature="report()"><variable citdl="VersionConflict" ilk="argument" line="354" name="self" /></scope><scope doc="If required_by is non-empty, return a version of self that is a&#10;ContextualVersionConflict." ilk="function" line="357" lineend="365" name="with_context" returns="ContextualVersionConflict()" signature="with_context(required_by)"><variable citdl="VersionConflict" ilk="argument" line="357" name="self" /><variable ilk="argument" line="357" name="required_by" /><variable line="364" name="args" /></scope></scope><scope classrefs="VersionConflict" doc="A VersionConflict that accepts a third parameter, the set of the&#10;requirements that required the installed Distribution." ilk="class" line="368" lineend="376" name="ContextualVersionConflict"><variable attributes="protected" line="374" name="_template" /><scope attributes="__hidden__" ilk="function" line="376" lineend="376" name="required_by (property getter)" signature="required_by (property getter)()"><variable citdl="ContextualVersionConflict" ilk="argument" line="376" name="self" /></scope><variable attributes="property" line="376" name="required_by" /></scope><scope classrefs="ResolutionError" doc="A requested distribution was not found" ilk="class" line="381" lineend="405" name="DistributionNotFound"><variable attributes="protected" citdl="str" line="384" name="_template" /><scope attributes="__hidden__" ilk="function" line="387" lineend="387" name="req (property getter)" signature="req (property getter)()"><variable citdl="DistributionNotFound" ilk="argument" line="387" name="self" /></scope><variable attributes="property" line="387" name="req" /><variable attributes="property" line="391" name="requirers" /><scope attributes="__hidden__" ilk="function" line="391" lineend="391" name="requirers (property getter)" signature="requirers (property getter)()"><variable citdl="DistributionNotFound" ilk="argument" line="391" name="self" /></scope><scope attributes="__hidden__" ilk="function" line="395" lineend="395" name="requirers_str (property getter)" returns="str" signature="requirers_str (property getter)()"><variable citdl="DistributionNotFound" ilk="argument" line="395" name="self" /></scope><variable attributes="property" citdl="__builtins__.str.join()" line="395" name="requirers_str" /><scope ilk="function" line="401" lineend="402" name="report" returns="self._template.format()" signature="report()"><variable citdl="DistributionNotFound" ilk="argument" line="401" name="self" /></scope><scope ilk="function" line="404" lineend="405" name="__str__" returns="DistributionNotFound.report()" signature="__str__()"><variable citdl="DistributionNotFound" ilk="argument" line="404" name="self" /></scope></scope><scope classrefs="ResolutionError" doc="Distribution doesn't have an &quot;extra feature&quot; of the given name" ilk="class" line="408" lineend="409" name="UnknownExtra" /><variable attributes="protected" citdl="dict" line="410" name="_provider_factories" /><variable line="412" name="PY_MAJOR" /><variable citdl="int" line="413" name="EGG_DIST" /><variable citdl="int" line="414" name="BINARY_DIST" /><variable citdl="int" line="415" name="SOURCE_DIST" /><variable citdl="int" line="416" name="CHECKOUT_DIST" /><variable citdl="int" line="417" name="DEVELOP_DIST" /><scope doc="Register `provider_factory` to make providers for `loader_type`&#10;&#10;`loader_type` is the type or class of a PEP 302 ``module.__loader__``,&#10;and `provider_factory` is a function that, passed a *module* object,&#10;returns an ``IResourceProvider`` for that module." ilk="function" line="419" lineend="426" name="register_loader_type" signature="register_loader_type(loader_type, provider_factory)"><variable ilk="argument" line="419" name="loader_type" /><variable ilk="argument" line="419" name="provider_factory" /></scope><scope doc="Return an IResourceProvider for the named module or requirement" ilk="function" line="428" lineend="438" name="get_provider" returns="_find_adapter()()" signature="get_provider(moduleOrReq)"><variable ilk="argument" line="428" name="moduleOrReq" /><variable line="433" name="module" /><variable citdl="getattr()" line="437" name="loader" /></scope><scope attributes="protected" ilk="function" line="440" lineend="453" name="_macosx_vers" signature="_macosx_vers(_cache=[])"><variable citdl="list" ilk="argument" line="440" name="_cache" /><variable line="442" name="version" /><variable citdl="str" line="445" name="plist" /><variable citdl="plistlib.readPlist()" line="448" name="plist_content" /></scope><scope attributes="protected" ilk="function" line="455" lineend="456" name="_macosx_arch" returns="{}.get()" signature="_macosx_arch(machine)"><variable ilk="argument" line="455" name="machine" /></scope><scope doc="Return this platform's string for platform-specific distributions&#10;&#10;XXX Currently this is the same as ``distutils.util.get_platform()``, but it&#10;needs some hacks for Linux and Mac OS X." ilk="function" line="458" lineend="481" name="get_build_platform" returns="get_platform()" signature="get_build_platform()"><import line="466" module="sysconfig" symbol="get_platform" /><import line="468" module="distutils.util" symbol="get_platform" /><variable citdl="get_platform()" line="470" name="plat" /><variable citdl="_macosx_vers()" line="473" name="version" /><variable line="474" name="machine" /></scope><variable citdl="re.compile()" line="483" name="macosVersionString" /><variable citdl="re.compile()" line="484" name="darwinVersionString" /><variable citdl="get_build_platform" line="486" name="get_platform" /><scope doc="Can code for the `provided` platform run on the `required` platform?&#10;&#10;Returns true if either platform is ``None``, or the platforms are equal.&#10;&#10;XXX Needs compatibility checks for Linux and other unixy OSes." ilk="function" line="489" lineend="532" name="compatible_platforms" returns="bool" signature="compatible_platforms(provided, required)"><variable ilk="argument" line="489" name="provided" /><variable ilk="argument" line="489" name="required" /><variable citdl="macosVersionString.match()" line="501" name="reqMac" /><variable citdl="macosVersionString.match()" line="503" name="provMac" /><variable citdl="darwinVersionString.match()" line="510" name="provDarwin" /><variable citdl="int()" line="512" name="dversion" /><variable line="513" name="macosversion" /></scope><scope doc="Locate distribution `dist_spec` and run its `script_name` script" ilk="function" line="535" lineend="541" name="run_script" signature="run_script(dist_spec, script_name)"><variable ilk="argument" line="535" name="dist_spec" /><variable ilk="argument" line="535" name="script_name" /><variable line="537" name="ns" /><variable line="538" name="name" /></scope><variable citdl="run_script" line="544" name="run_main" /><scope doc="Return a current distribution object for a Requirement or string" ilk="function" line="546" lineend="554" name="get_distribution" returns="Requirement.parse()" signature="get_distribution(dist)"><variable citdl="get_provider()" ilk="argument" line="546" name="dist" /></scope><scope doc="Return `name` entry point of `group` for `dist` or raise ImportError" ilk="function" line="556" lineend="558" name="load_entry_point" signature="load_entry_point(dist, group, name)"><variable ilk="argument" line="556" name="dist" /><variable ilk="argument" line="556" name="group" /><variable ilk="argument" line="556" name="name" /></scope><scope doc="Return the entry point map for `group`, or the full entry map" ilk="function" line="560" lineend="562" name="get_entry_map" signature="get_entry_map(dist, group=None)"><variable ilk="argument" line="560" name="dist" /><variable ilk="argument" line="560" name="group" /></scope><scope doc="Return the EntryPoint object for `group`+`name`, or ``None``" ilk="function" line="564" lineend="566" name="get_entry_info" signature="get_entry_info(dist, group, name)"><variable ilk="argument" line="564" name="dist" /><variable ilk="argument" line="564" name="group" /><variable ilk="argument" line="564" name="name" /></scope><scope ilk="class" line="569" lineend="590" name="IMetadataProvider"><scope doc="Does the package's distribution contain the named metadata?" ilk="function" line="571" lineend="572" name="has_metadata" signature="has_metadata()"><variable citdl="IMetadataProvider" ilk="argument" line="571" name="name" /></scope><scope doc="The named metadata resource as a string" ilk="function" line="574" lineend="575" name="get_metadata" signature="get_metadata()"><variable citdl="IMetadataProvider" ilk="argument" line="574" name="name" /></scope><scope doc="Yield named metadata resource as list of non-blank non-comment lines&#10;&#10;Leading and trailing whitespace is stripped from each line, and lines&#10;with ``#`` as the first non-blank character are omitted." ilk="function" line="577" lineend="581" name="get_metadata_lines" signature="get_metadata_lines()"><variable citdl="IMetadataProvider" ilk="argument" line="577" name="name" /></scope><scope doc="Is the named metadata a directory?  (like ``os.path.isdir()``)" ilk="function" line="583" lineend="584" name="metadata_isdir" signature="metadata_isdir()"><variable citdl="IMetadataProvider" ilk="argument" line="583" name="name" /></scope><scope doc="List of metadata names in the directory (like ``os.listdir()``)" ilk="function" line="586" lineend="587" name="metadata_listdir" signature="metadata_listdir()"><variable citdl="IMetadataProvider" ilk="argument" line="586" name="name" /></scope><scope doc="Execute the named script in the supplied namespace dictionary" ilk="function" line="589" lineend="590" name="run_script" signature="run_script(namespace)"><variable citdl="IMetadataProvider" ilk="argument" line="589" name="script_name" /><variable ilk="argument" line="589" name="namespace" /></scope></scope><scope classrefs="IMetadataProvider" doc="An object that provides access to package resources" ilk="class" line="593" lineend="618" name="IResourceProvider"><scope doc="Return a true filesystem path for `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="596" lineend="599" name="get_resource_filename" signature="get_resource_filename(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="596" name="manager" /><variable ilk="argument" line="596" name="resource_name" /></scope><scope doc="Return a readable file-like object for `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="601" lineend="604" name="get_resource_stream" signature="get_resource_stream(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="601" name="manager" /><variable ilk="argument" line="601" name="resource_name" /></scope><scope doc="Return a string containing the contents of `resource_name`&#10;&#10;`manager` must be an ``IResourceManager``" ilk="function" line="606" lineend="609" name="get_resource_string" signature="get_resource_string(resource_name)"><variable citdl="IResourceProvider" ilk="argument" line="606" name="manager" /><variable ilk="argument" line="606" name="resource_name" /></scope><scope doc="Does the package contain the named resource?" ilk="function" line="611" lineend="612" name="has_resource" signature="has_resource()"><variable citdl="IResourceProvider" ilk="argument" line="611" name="resource_name" /></scope><scope doc="Is the named resource a directory?  (like ``os.path.isdir()``)" ilk="function" line="614" lineend="615" name="resource_isdir" signature="resource_isdir()"><variable citdl="IResourceProvider" ilk="argument" line="614" name="resource_name" /></scope><scope doc="List of resource names in the directory (like ``os.listdir()``)" ilk="function" line="617" lineend="618" name="resource_listdir" signature="resource_listdir()"><variable citdl="IResourceProvider" ilk="argument" line="617" name="resource_name" /></scope></scope><scope classrefs="object" doc="A collection of active distributions on sys.path (or a similar list)" ilk="class" line="621" lineend="982" name="WorkingSet"><scope attributes="__ctor__" doc="Create working set from list of path entries (default=sys.path)" ilk="function" line="624" lineend="635" name="__init__" signature="WorkingSet(entries=None)"><variable citdl="WorkingSet" ilk="argument" line="624" name="self" /><variable citdl="sys.path" ilk="argument" line="624" name="entries" /><variable line="634" name="entry" /></scope><variable attributes="__instancevar__" citdl="list" line="626" name="entries" /><variable attributes="__instancevar__" citdl="keys.copy()" line="627" name="entry_keys" /><variable attributes="__instancevar__" citdl="by_key.copy()" line="628" name="by_key" /><variable attributes="__instancevar__" citdl="list" line="629" name="callbacks" /><scope attributes="protected __classmethod__" doc="Prepare the master working set." ilk="function" line="637" lineend="637" name="_build_master" returns="cls._build_from_requirements()" signature="_build_master() - classmethod"><import line="644" module="__main__" symbol="__requires__" /><variable citdl="WorkingSet" ilk="argument" line="637" name="cls" /><variable citdl="cls()" line="642" name="ws" /></scope><scope attributes="protected __classmethod__" doc="Build a working set from a requirement spec. Rewrites sys.path." ilk="function" line="657" lineend="657" name="_build_from_requirements" returns="cls()" signature="_build_from_requirements(req_spec) - classmethod"><variable citdl="WorkingSet" ilk="argument" line="657" name="cls" /><variable ilk="argument" line="657" name="req_spec" /><variable citdl="cls()" line="664" name="ws" /><variable citdl="parse_requirements()" line="665" name="reqs" /><variable citdl="ws.resolve()" line="666" name="dists" /><variable line="667" name="dist" /><variable line="671" name="entry" /></scope><scope doc="Add a path item to ``.entries``, finding any distributions on it&#10;&#10;``find_distributions(entry, True)`` is used to find distributions&#10;corresponding to the path entry, and they are added.  `entry` is&#10;always appended to ``.entries``, even if it is already present.&#10;(This is because ``sys.path`` can contain the same value more than&#10;once, and the ``.entries`` of the ``sys.path`` WorkingSet should always&#10;equal ``sys.path``.)" ilk="function" line="679" lineend="692" name="add_entry" signature="add_entry(entry)"><variable citdl="WorkingSet" ilk="argument" line="679" name="self" /><variable ilk="argument" line="679" name="entry" /><variable line="691" name="dist" /></scope><scope doc="True if `dist` is the active distribution for its project" ilk="function" line="694" lineend="696" name="__contains__" returns="bool" signature="__contains__(dist)"><variable citdl="WorkingSet" ilk="argument" line="694" name="self" /><variable ilk="argument" line="694" name="dist" /></scope><scope doc="Find a distribution matching requirement `req`&#10;&#10;If there is an active distribution for the requested project, this&#10;returns it as int as it meets the version requirement specified by&#10;`req`.  But, if there is an active distribution for the project and it&#10;does *not* meet the `req` requirement, ``VersionConflict`` is raised.&#10;If there is no active distribution for the requested project, ``None``&#10;is returned." ilk="function" line="698" lineend="712" name="find" returns="self.by_key.get()" signature="find(req)"><variable citdl="WorkingSet" ilk="argument" line="698" name="self" /><variable ilk="argument" line="698" name="req" /><variable citdl="self.by_key.get()" line="708" name="dist" /></scope><scope doc="Yield entry point objects from `group` matching `name`&#10;&#10;If `name` is None, yields all entry points in `group` from all&#10;distributions in the working set, otherwise only ones matching&#10;both `group` and `name` are yielded (in distribution order)." ilk="function" line="714" lineend="727" name="iter_entry_points" signature="iter_entry_points(group, name=None)"><variable citdl="WorkingSet" ilk="argument" line="714" name="self" /><variable ilk="argument" line="714" name="group" /><variable ilk="argument" line="714" name="name" /><variable line="721" name="dist" /><variable citdl="dist.get_entry_map()" line="722" name="entries" /><variable line="724" name="ep" /></scope><scope doc="Locate distribution for `requires` and run `script_name` script" ilk="function" line="729" lineend="735" name="run_script" signature="run_script(requires, script_name)"><variable citdl="WorkingSet" ilk="argument" line="729" name="self" /><variable ilk="argument" line="729" name="requires" /><variable ilk="argument" line="729" name="script_name" /><variable line="731" name="ns" /><variable line="732" name="name" /></scope><scope doc="Yield distributions for non-duplicate projects in the working set&#10;&#10;The yield order is the order in which the items' path entries were&#10;added to the working set." ilk="function" line="737" lineend="752" name="__iter__" signature="__iter__()"><variable citdl="WorkingSet" ilk="argument" line="737" name="self" /><variable citdl="dict" line="743" name="seen" /><variable line="744" name="item" /><variable line="749" name="key" /></scope><scope doc="Add `dist` to working set, associated with `entry`&#10;&#10;If `entry` is unspecified, it defaults to the ``.location`` of `dist`.&#10;On exit from this routine, `entry` is added to the end of the working&#10;set's ``.entries`` (if it wasn't already present).&#10;&#10;`dist` is only added to the working set if it's for a project that&#10;doesn't already have a distribution in the set, unless `replace=True`.&#10;If it's added, any callbacks registered with the ``subscribe()`` method&#10;will be called." ilk="function" line="754" lineend="782" name="add" signature="add(dist, entry=None, insert=True, replace=False)"><variable citdl="WorkingSet" ilk="argument" line="754" name="self" /><variable ilk="argument" line="754" name="dist" /><variable citdl="dist.location" ilk="argument" line="754" name="entry" /><variable citdl="True" ilk="argument" line="754" name="insert" /><variable citdl="False" ilk="argument" line="754" name="replace" /><variable citdl="self.entry_keys.setdefault()" line="771" name="keys" /><variable citdl="self.entry_keys.setdefault()" line="772" name="keys2" /></scope><scope doc="List all distributions needed to (recursively) meet `requirements`&#10;&#10;`requirements` must be a sequence of ``Requirement`` objects.  `env`,&#10;if supplied, should be an ``Environment`` instance.  If&#10;not supplied, it defaults to all distributions available within any&#10;entry or distribution in the working set.  `installer`, if supplied,&#10;will be invoked with each requirement that cannot be met by an&#10;already-installed distribution; it should return a ``Distribution`` or&#10;``None``.&#10;&#10;Unless `replace_conflicting=True`, raises a VersionConflict exception if&#10;any requirements are found on the path that have the correct name but&#10;the wrong version.  Otherwise, if an `installer` is supplied it will be&#10;invoked to obtain the correct version of the requirement and activate&#10;it." ilk="function" line="784" lineend="857" name="resolve" returns="list" signature="resolve(requirements, env=None, installer=None, replace_conflicting=False)"><variable citdl="WorkingSet" ilk="argument" line="784" name="self" /><variable ilk="argument" line="784" name="requirements" /><variable citdl="Environment()" ilk="argument" line="784" name="env" /><variable ilk="argument" line="784" name="installer" /><variable citdl="False" ilk="argument" line="784" name="replace_conflicting" /><variable citdl="dict" line="806" name="processed" /><variable citdl="dict" line="808" name="best" /><variable citdl="list" line="809" name="to_activate" /><variable citdl="collections.defaultdict()" line="813" name="required_by" /><variable citdl="requirements.pop()" line="817" name="req" /><variable citdl="self.by_key.get()" line="821" name="dist" /><variable citdl="" line="826" name="ws" /><variable citdl="required_by.get()" line="838" name="requirers" /><variable line="843" name="dependent_req" /><variable line="847" name="new_requirements" /><variable line="851" name="new_requirement" /></scope><scope doc="Find all activatable distributions in `plugin_env`&#10;&#10;Example usage::&#10;&#10;    distributions, errors = working_set.find_plugins(&#10;        Environment(plugin_dirlist)&#10;    )&#10;&#10;    map(working_set.add, distributions)&#10;&#10;    print('Could not load', errors)&#10;&#10;The `plugin_env` should be an ``Environment`` instance that contains&#10;only distributions that are in the project's &quot;plugin directory&quot; or&#10;directories. The `full_env`, if supplied, should be an ``Environment``&#10;contains all currently-available distributions.  If `full_env` is not&#10;supplied, one is created automatically from the ``WorkingSet`` this&#10;method is called on, which will typically mean that every directory on&#10;``sys.path`` will be scanned for distributions.&#10;&#10;`installer` is a standard installer callback as used by the&#10;``resolve()`` method. The `fallback` flag indicates whether we should&#10;attempt to resolve older versions of a plugin if the newest version&#10;cannot be resolved.&#10;&#10;This method returns a 2-tuple: (`distributions`, `error_info`), where&#10;`distributions` is a list of the distributions found in `plugin_env`&#10;that were loadable, along with any other distributions that are needed&#10;to resolve their dependencies.  `error_info` is a dictionary mapping&#10;unloadable plugin distributions to an exception instance describing the&#10;error that occurred. Usually this will be a ``DistributionNotFound`` or&#10;``VersionConflict`` instance." ilk="function" line="859" lineend="941" name="find_plugins" returns="tuple" signature="find_plugins(plugin_env, full_env=None, installer=None, fallback=True)"><variable citdl="WorkingSet" ilk="argument" line="859" name="self" /><variable ilk="argument" line="859" name="plugin_env" /><variable ilk="argument" line="859" name="full_env" /><variable ilk="argument" line="859" name="installer" /><variable citdl="True" ilk="argument" line="859" name="fallback" /><variable citdl="list()" line="895" name="plugin_projects" /><variable citdl="dict" line="899" name="error_info" /><variable citdl="list()" line="900" name="distributions" /><variable citdl="Environment()" line="903" name="env" /><variable citdl="self.__class__()" line="908" name="shadow_set" /><variable line="912" name="project_name" /><variable line="914" name="dist" /><variable citdl="list" line="916" name="req" /><variable citdl="shadow_set.resolve()" line="919" name="resolvees" /></scope><scope doc="Ensure that distributions matching `requirements` are activated&#10;&#10;`requirements` must be a string or a (possibly-nested) sequence&#10;thereof, specifying the distributions and versions required.  The&#10;return value is a sequence of the distributions that needed to be&#10;activated to fulfill the requirements; all relevant distributions are&#10;included, even if they were already activated in this working set." ilk="function" line="943" lineend="957" name="require" returns="resolve()" signature="require()"><variable attributes="varargs" citdl="WorkingSet" ilk="argument" line="943" name="self" /><variable citdl="resolve()" line="952" name="needed" /><variable line="954" name="dist" /></scope><scope doc="Invoke `callback` for all distributions (including existing ones)" ilk="function" line="959" lineend="965" name="subscribe" signature="subscribe(callback)"><variable citdl="WorkingSet" ilk="argument" line="959" name="self" /><variable ilk="argument" line="959" name="callback" /><variable line="964" name="dist" /></scope><scope attributes="protected" ilk="function" line="967" lineend="969" name="_added_new" signature="_added_new(dist)"><variable citdl="WorkingSet" ilk="argument" line="967" name="self" /><variable ilk="argument" line="967" name="dist" /><variable line="968" name="callback" /></scope><scope ilk="function" line="971" lineend="973" name="__getstate__" returns="tuple" signature="__getstate__()"><variable citdl="WorkingSet" ilk="argument" line="971" name="self" /></scope><scope ilk="function" line="977" lineend="982" name="__setstate__" signature="__setstate__(e_k_b_c)"><variable citdl="WorkingSet" ilk="argument" line="977" name="self" /><variable ilk="argument" line="977" name="e_k_b_c" /></scope></scope><scope classrefs="object" doc="Searchable snapshot of distributions on a search path" ilk="class" line="985" lineend="1118" name="Environment"><scope attributes="__ctor__" doc="Snapshot distributions available on a search path&#10;&#10;Any distributions found on `search_path` are added to the environment.&#10;`search_path` should be a sequence of ``sys.path`` items.  If not&#10;supplied, ``sys.path`` is used.&#10;&#10;`platform` is an optional string specifying the name of the platform&#10;that platform-specific distributions must be compatible with.  If&#10;unspecified, it defaults to the current platform.  `python` is an&#10;optional string naming the desired version of Python (e.g. ``'3.3'``);&#10;it defaults to the current version.&#10;&#10;You may explicitly set `platform` (and/or `python`) to ``None`` if you&#10;wish to map *all* distributions, not just those compatible with the&#10;running platform or Python version." ilk="function" line="988" lineend="1009" name="__init__" signature="Environment(search_path=None, platform=get_supported_platform(), python=PY_MAJOR)"><variable citdl="Environment" ilk="argument" line="988" name="self" /><variable ilk="argument" line="988" name="search_path" /><variable citdl="get_supported_platform()" ilk="argument" line="988" name="platform" /><variable ilk="argument" line="988" name="python" /></scope><variable attributes="protected __instancevar__" citdl="dict" line="1006" name="_distmap" /><variable attributes="__instancevar__" citdl="get_supported_platform()" line="1007" name="platform" /><variable attributes="__instancevar__" line="1008" name="python" /><scope doc="Is distribution `dist` acceptable for this environment?&#10;&#10;The distribution must match the platform and python version&#10;requirements specified when this environment was created, or False&#10;is returned." ilk="function" line="1011" lineend="1020" name="can_add" returns="compatible_platforms()" signature="can_add(dist)"><variable citdl="Environment" ilk="argument" line="1011" name="self" /><variable ilk="argument" line="1011" name="dist" /></scope><scope doc="Remove `dist` from the environment" ilk="function" line="1022" lineend="1024" name="remove" signature="remove(dist)"><variable citdl="Environment" ilk="argument" line="1022" name="self" /><variable ilk="argument" line="1022" name="dist" /></scope><scope doc="Scan `search_path` for distributions usable in this environment&#10;&#10;Any distributions found are added to the environment.&#10;`search_path` should be a sequence of ``sys.path`` items.  If not&#10;supplied, ``sys.path`` is used.  Only distributions conforming to&#10;the platform/python version defined at initialization are added." ilk="function" line="1026" lineend="1039" name="scan" signature="scan(search_path=None)"><variable citdl="Environment" ilk="argument" line="1026" name="self" /><variable citdl="sys.path" ilk="argument" line="1026" name="search_path" /><variable line="1037" name="item" /><variable line="1038" name="dist" /></scope><scope doc="Return a newest-to-oldest list of distributions for `project_name`&#10;&#10;Uses case-insensitive `project_name` comparison, assuming all the&#10;project's distributions use their project's name converted to all&#10;lowercase as their key." ilk="function" line="1041" lineend="1050" name="__getitem__" returns="self._distmap.get()" signature="__getitem__(project_name)"><variable citdl="Environment" ilk="argument" line="1041" name="self" /><variable ilk="argument" line="1041" name="project_name" /><variable citdl="project_name.lower()" line="1049" name="distribution_key" /></scope><scope doc="Add `dist` if we ``can_add()`` it and it has not already been added&#10;        " ilk="function" line="1052" lineend="1059" name="add" signature="add(dist)"><variable citdl="Environment" ilk="argument" line="1052" name="self" /><variable ilk="argument" line="1052" name="dist" /><variable citdl="self._distmap.setdefault()" line="1056" name="dists" /></scope><scope doc="Find distribution best matching `req` and usable on `working_set`&#10;&#10;This calls the ``find(req)`` method of the `working_set` to see if a&#10;suitable distribution is already active.  (This may raise&#10;``VersionConflict`` if an unsuitable version of the project is already&#10;active in the specified `working_set`.)  If a suitable distribution&#10;isn't active, this method returns the newest distribution in the&#10;environment that meets the ``Requirement`` in `req`.  If no suitable&#10;distribution is found, and `installer` is supplied, then the result of&#10;calling the environment's ``obtain(req, installer)`` method will be&#10;returned." ilk="function" line="1061" lineend="1081" name="best_match" returns="working_set.find()" signature="best_match(req, working_set, installer=None)"><variable citdl="Environment" ilk="argument" line="1061" name="self" /><variable ilk="argument" line="1061" name="req" /><variable ilk="argument" line="1061" name="working_set" /><variable ilk="argument" line="1061" name="installer" /><variable citdl="working_set.find()" line="1074" name="dist" /></scope><scope doc="Obtain a distribution matching `requirement` (e.g. via download)&#10;&#10;Obtain a distro that matches requirement (e.g. via download).  In the&#10;base ``Environment`` class, this routine just returns&#10;``installer(requirement)``, unless `installer` is None, in which case&#10;None is returned instead.  This method is a hook that allows subclasses&#10;to attempt other ways of obtaining a distribution before falling back&#10;to the `installer` argument." ilk="function" line="1083" lineend="1093" name="obtain" returns="Environment.obtain.installer()" signature="obtain(requirement, installer=None)"><variable citdl="Environment" ilk="argument" line="1083" name="self" /><variable ilk="argument" line="1083" name="requirement" /><variable ilk="argument" line="1083" name="installer" /></scope><scope doc="Yield the unique project names of the available distributions" ilk="function" line="1095" lineend="1099" name="__iter__" signature="__iter__()"><variable citdl="Environment" ilk="argument" line="1095" name="self" /><variable line="1097" name="key" /></scope><scope doc="In-place addition of a distribution or environment" ilk="function" line="1101" lineend="1111" name="__iadd__" returns="Environment" signature="__iadd__(other)"><variable citdl="Environment" ilk="argument" line="1101" name="self" /><variable ilk="argument" line="1101" name="other" /><variable line="1106" name="project" /><variable line="1107" name="dist" /></scope><scope doc="Add an environment or distribution to an environment" ilk="function" line="1113" lineend="1118" name="__add__" returns="self.__class__()" signature="__add__(other)"><variable citdl="Environment" ilk="argument" line="1113" name="self" /><variable ilk="argument" line="1113" name="other" /><variable citdl="self.__class__()" line="1115" name="new" /><variable line="1116" name="env" /></scope></scope><variable citdl="Environment" line="1122" name="AvailableDistributions" /><scope classrefs="RuntimeError" doc="An error occurred extracting a resource&#10;&#10;The following attributes are available from instances of this exception:&#10;&#10;manager&#10;    The resource manager that raised this exception&#10;&#10;cache_path&#10;    The base directory for resource extraction&#10;&#10;original_error&#10;    The exception instance that caused extraction to fail" ilk="class" line="1125" lineend="1138" name="ExtractionError" /><scope doc="Manage resource extraction and packages" ilk="class" line="1141" lineend="1314" name="ResourceManager"><variable line="1143" name="extraction_path" /><scope attributes="__ctor__" ilk="function" line="1145" lineend="1146" name="__init__" signature="ResourceManager()"><variable citdl="ResourceManager" ilk="argument" line="1145" name="self" /></scope><variable attributes="__instancevar__" citdl="dict" line="1146" name="cached_files" /><scope doc="Does the named resource exist?" ilk="function" line="1148" lineend="1150" name="resource_exists" signature="resource_exists(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1148" name="self" /><variable ilk="argument" line="1148" name="package_or_requirement" /><variable ilk="argument" line="1148" name="resource_name" /></scope><scope doc="Is the named resource an existing directory?" ilk="function" line="1152" lineend="1155" name="resource_isdir" signature="resource_isdir(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1152" name="self" /><variable ilk="argument" line="1152" name="package_or_requirement" /><variable ilk="argument" line="1152" name="resource_name" /></scope><scope doc="Return a true filesystem path for specified resource" ilk="function" line="1158" lineend="1161" name="resource_filename" signature="resource_filename(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1158" name="self" /><variable ilk="argument" line="1158" name="package_or_requirement" /><variable ilk="argument" line="1158" name="resource_name" /></scope><scope doc="Return a readable file-like object for specified resource" ilk="function" line="1164" lineend="1167" name="resource_stream" signature="resource_stream(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1164" name="self" /><variable ilk="argument" line="1164" name="package_or_requirement" /><variable ilk="argument" line="1164" name="resource_name" /></scope><scope doc="Return specified resource as a string" ilk="function" line="1170" lineend="1173" name="resource_string" signature="resource_string(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1170" name="self" /><variable ilk="argument" line="1170" name="package_or_requirement" /><variable ilk="argument" line="1170" name="resource_name" /></scope><scope doc="List the contents of the named resource directory" ilk="function" line="1176" lineend="1179" name="resource_listdir" signature="resource_listdir(package_or_requirement, resource_name)"><variable citdl="ResourceManager" ilk="argument" line="1176" name="self" /><variable ilk="argument" line="1176" name="package_or_requirement" /><variable ilk="argument" line="1176" name="resource_name" /></scope><scope doc="Give an error message for problems extracting file(s)" ilk="function" line="1182" lineend="1207" name="extraction_error" signature="extraction_error()"><variable citdl="ResourceManager" ilk="argument" line="1182" name="self" /><variable line="1185" name="old_exc" /><variable citdl="get_default_cache()" line="1186" name="cache_path" /><variable citdl="ExtractionError" line="1188" name="err" /></scope><scope doc="Return absolute location in cache for `archive_name` and `names`&#10;&#10;The parent directory of the resulting path will be created if it does&#10;not already exist.  `archive_name` should be the base filename of the&#10;enclosing egg (which may not be the name of the enclosing zipfile!),&#10;including its &quot;.egg&quot; extension.  `names`, if provided, should be a&#10;sequence of path name parts &quot;under&quot; the egg's extraction location.&#10;&#10;This method should only be called by resource providers that need to&#10;obtain an extraction location, and only for names they intend to&#10;extract, as it tracks the generated names for possible cleanup later." ilk="function" line="1209" lineend="1232" name="get_cache_path" returns="os.path.join()" signature="get_cache_path(archive_name, names=())"><variable citdl="ResourceManager" ilk="argument" line="1209" name="self" /><variable ilk="argument" line="1209" name="archive_name" /><variable citdl="tuple" ilk="argument" line="1209" name="names" /><variable citdl="get_default_cache()" line="1222" name="extract_path" /><variable citdl="os.path.join()" line="1223" name="target_path" /></scope><scope attributes="protected __staticmethod__" doc="If the default extraction path is overridden and set to an insecure&#10;location, such as /tmp, it opens up an opportunity for an attacker to&#10;replace an extracted file with an unauthorized payload. Warn the user&#10;if a known insecure location is used.&#10;&#10;See Distribute #375 for more details." ilk="function" line="1234" lineend="1234" name="_warn_unsafe_extraction_path" signature="_warn_unsafe_extraction_path(path) - staticmethod"><variable citdl="ResourceManager" ilk="argument" line="1234" name="path" /><variable line="1249" name="mode" /><variable line="1251" name="msg" /></scope><scope doc="Perform any platform-specific postprocessing of `tempname`&#10;&#10;This is where Mac header rewrites should be done; other platforms don't&#10;have anything special they should do.&#10;&#10;Resource providers should call this method ONLY after successfully&#10;extracting a compressed resource.  They must NOT call it on resources&#10;that are already in the filesystem.&#10;&#10;`tempname` is the current (temporary) name of the file, and `filename`&#10;is the name it will be renamed to by the caller after this routine&#10;returns." ilk="function" line="1258" lineend="1276" name="postprocess" signature="postprocess(tempname, filename)"><variable citdl="ResourceManager" ilk="argument" line="1258" name="self" /><variable ilk="argument" line="1258" name="tempname" /><variable ilk="argument" line="1258" name="filename" /><variable citdl="int" line="1275" name="mode" /></scope><scope doc="Set the base path where resources will be extracted to, if needed.&#10;&#10;If you do not call this routine before any extractions take place, the&#10;path defaults to the return value of ``get_default_cache()``.  (Which&#10;is based on the ``PYTHON_EGG_CACHE`` environment variable, with various&#10;platform-specific fallbacks.  See that routine's documentation for more&#10;details.)&#10;&#10;Resources are extracted to subdirectories of this path based upon&#10;information given by the ``IResourceProvider``.  You may set this to a&#10;temporary directory, but then you must call ``cleanup_resources()`` to&#10;delete the extracted files when done.  There is no guarantee that&#10;``cleanup_resources()`` will be able to remove all extracted files.&#10;&#10;(Note: you may not change the extraction path for a given resource&#10;manager once resources have been extracted, unless you first call&#10;``cleanup_resources()``.)" ilk="function" line="1278" lineend="1302" name="set_extraction_path" signature="set_extraction_path(path)"><variable citdl="ResourceManager" ilk="argument" line="1278" name="self" /><variable ilk="argument" line="1278" name="path" /></scope><scope doc="Delete all extracted resource files and directories, returning a list&#10;of the file and directory names that could not be successfully removed.&#10;This function does not have any concurrency protection, so it should&#10;generally only be called when the extraction path is a temporary&#10;directory exclusive to a single process.  This method is not&#10;automatically called; you must call it explicitly or register it as an&#10;``atexit`` function if you wish to ensure cleanup of a temporary&#10;directory used for extractions." ilk="function" line="1304" lineend="1314" name="cleanup_resources" signature="cleanup_resources(force=False)"><variable citdl="ResourceManager" ilk="argument" line="1304" name="self" /><variable citdl="False" ilk="argument" line="1304" name="force" /></scope></scope><scope doc="Determine the default cache location&#10;&#10;This returns the ``PYTHON_EGG_CACHE`` environment variable, if set.&#10;Otherwise, on Windows, it returns a &quot;Python-Eggs&quot; subdirectory of the&#10;&quot;Application Data&quot; directory.  On all other systems, it's &quot;~/.python-eggs&quot;." ilk="function" line="1317" lineend="1358" name="get_default_cache" returns="os.path.expanduser()" signature="get_default_cache()"><variable citdl="str" line="1333" name="app_data" /><variable citdl="list" line="1334" name="app_homes" /><variable line="1345" name="keys" /><variable line="1345" name="subdir" /><variable citdl="os.path.join()" line="1346" name="dirname" /><variable line="1347" name="key" /></scope><scope doc="Convert an arbitrary string to a standard distribution name&#10;&#10;Any runs of non-alphanumeric/. characters are replaced with a single '-'." ilk="function" line="1361" lineend="1366" name="safe_name" returns="re.sub()" signature="safe_name(name)"><variable ilk="argument" line="1361" name="name" /></scope><scope doc="Convert an arbitrary string to a standard version string" ilk="function" line="1369" lineend="1378" name="safe_version" returns="re.sub()" signature="safe_version(version)"><variable citdl="version.replace()" ilk="argument" line="1369" name="version" /></scope><scope doc="Convert an arbitrary string to a standard 'extra' name&#10;&#10;Any runs of non-alphanumeric characters are replaced with a single '_',&#10;and the result is always lowercased." ilk="function" line="1381" lineend="1387" name="safe_extra" signature="safe_extra(extra)"><variable ilk="argument" line="1381" name="extra" /></scope><scope doc="Convert a project or version name to its filename-escaped form&#10;&#10;Any '-' characters are currently replaced with '_'." ilk="function" line="1390" lineend="1395" name="to_filename" returns="name.replace()" signature="to_filename(name)"><variable ilk="argument" line="1390" name="name" /></scope><scope classrefs="object" ilk="class" line="1398" lineend="1575" name="MarkerEvaluation"><variable citdl="dict" line="1399" name="values" /><scope attributes="__classmethod__" doc="Validate text as a PEP 426 environment marker; return an exception&#10;if invalid or False otherwise." ilk="function" line="1409" lineend="1409" name="is_invalid_marker" returns="bool" signature="is_invalid_marker(text) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1409" name="cls" /><variable ilk="argument" line="1409" name="text" /></scope><scope attributes="__staticmethod__" doc="Given a SyntaxError from a marker evaluation, normalize the error&#10;message:&#10; - Remove indications of filename and line number.&#10; - Replace platform-specific error messages with standard error&#10;   messages." ilk="function" line="1421" lineend="1421" name="normalize_exception" returns="MarkerEvaluation" signature="normalize_exception(exc) - staticmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1421" name="exc" /><variable citdl="dict" line="1430" name="subs" /></scope><variable attributes="__instancevar__" line="1434" name="filename" /><variable attributes="__instancevar__" line="1435" name="lineno" /><variable attributes="__instancevar__" citdl="subs.get()" line="1436" name="msg" /><scope attributes="__classmethod__" ilk="function" line="1439" lineend="1439" name="and_test" returns="functools.reduce()" signature="and_test(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1439" name="cls" /><variable ilk="argument" line="1439" name="nodelist" /><variable citdl="list" line="1442" name="items" /></scope><scope attributes="__classmethod__" ilk="function" line="1448" lineend="1448" name="test" returns="functools.reduce()" signature="test(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1448" name="cls" /><variable ilk="argument" line="1448" name="nodelist" /><variable citdl="list" line="1451" name="items" /></scope><scope attributes="__classmethod__" ilk="function" line="1457" lineend="1457" name="atom" returns="cls.interpret()" signature="atom(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1457" name="cls" /><variable ilk="argument" line="1457" name="nodelist" /><variable line="1459" name="t" /><variable citdl="str" line="1464" name="msg" /></scope><scope attributes="__classmethod__" ilk="function" line="1467" lineend="1467" name="comparison" returns="MarkerEvaluation.comparison.cop()" signature="comparison(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1467" name="cls" /><variable ilk="argument" line="1467" name="nodelist" /><variable citdl="str" line="1470" name="msg" /><variable line="1472" name="comp" /><variable citdl="str" line="1473" name="cop" /></scope><scope attributes="__classmethod__" ilk="function" line="1487" lineend="1487" name="get_op" signature="get_op(op) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1487" name="cls" /><variable ilk="argument" line="1487" name="op" /><variable citdl="dict" line="1489" name="ops" /></scope><scope attributes="protected __classmethod__" doc="Evaluate a PEP 426 environment marker using markerlib.&#10;Return a boolean indicating the marker result in this environment.&#10;Raise SyntaxError if marker is invalid." ilk="function" line="1521" lineend="1521" name="_markerlib_evaluate" returns="_markerlib.interpret()" signature="_markerlib_evaluate(text) - classmethod"><import line="1528" module="_markerlib" /><variable citdl="MarkerEvaluation" ilk="argument" line="1521" name="cls" /><variable ilk="argument" line="1521" name="text" /><variable citdl="_markerlib.default_environment()" line="1531" name="env" /><variable line="1532" name="key" /><variable citdl="key.replace()" line="1533" name="new_key" /><variable citdl="_markerlib.interpret()" line="1536" name="result" /></scope><variable attributes="__classmethod__" citdl="function" doc="Evaluate a PEP 426 environment marker on CPython 2.4+.&#10;Return a boolean indicating the marker result in this environment.&#10;Raise SyntaxError if marker is invalid.&#10;&#10;This implementation uses the 'parser' module, which is not implemented&#10;on&#10;Jython and has been superseded by the 'ast' module in Python 2.6 and&#10;later." line="1544" name="evaluate_marker" /><scope attributes="__classmethod__" ilk="function" line="1546" lineend="1546" name="interpret" returns="MarkerEvaluation.interpret.op()" signature="interpret(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1546" name="cls" /><variable ilk="argument" line="1546" name="nodelist" /><variable citdl="get_op()" line="1550" name="op" /></scope><scope attributes="__classmethod__" ilk="function" line="1555" lineend="1555" name="evaluate" returns="MarkerEvaluation.evaluate.op()" signature="evaluate(nodelist) - classmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1555" name="cls" /><variable ilk="argument" line="1555" name="nodelist" /><variable line="1558" name="kind" /><variable line="1559" name="name" /><variable line="1562" name="op" /><variable line="1567" name="s" /><variable citdl="str" line="1572" name="msg" /></scope><scope attributes="protected __staticmethod__" ilk="function" line="1575" lineend="1575" name="_safe_string" returns="cand.startswith()" signature="_safe_string(cand) - staticmethod"><variable citdl="MarkerEvaluation" ilk="argument" line="1575" name="cand" /></scope></scope><variable citdl="MarkerEvaluation.is_invalid_marker" line="1584" name="invalid_marker" /><variable citdl="function" line="1585" name="evaluate_marker" /><scope doc="Try to implement resources and metadata for arbitrary PEP 302 loaders" ilk="class" line="1587" lineend="1685" name="NullProvider"><variable line="1590" name="egg_name" /><variable line="1591" name="egg_info" /><variable citdl="getattr()" line="1592" name="loader" /><scope attributes="__ctor__" ilk="function" line="1594" lineend="1596" name="__init__" signature="NullProvider(module)"><variable citdl="NullProvider" ilk="argument" line="1594" name="self" /><variable ilk="argument" line="1594" name="module" /></scope><variable attributes="__instancevar__" citdl="os.path.dirname()" line="1596" name="module_path" /><scope ilk="function" line="1598" lineend="1599" name="get_resource_filename" returns="self._fn()" signature="get_resource_filename(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1598" name="self" /><variable ilk="argument" line="1598" name="manager" /><variable ilk="argument" line="1598" name="resource_name" /></scope><scope ilk="function" line="1601" lineend="1602" name="get_resource_stream" returns="io.BytesIO()" signature="get_resource_stream(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1601" name="self" /><variable ilk="argument" line="1601" name="manager" /><variable ilk="argument" line="1601" name="resource_name" /></scope><scope ilk="function" line="1604" lineend="1605" name="get_resource_string" returns="self._get()" signature="get_resource_string(manager, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1604" name="self" /><variable ilk="argument" line="1604" name="manager" /><variable ilk="argument" line="1604" name="resource_name" /></scope><scope ilk="function" line="1607" lineend="1608" name="has_resource" returns="self._has()" signature="has_resource(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1607" name="self" /><variable ilk="argument" line="1607" name="resource_name" /></scope><scope ilk="function" line="1610" lineend="1611" name="has_metadata" returns="self._has()" signature="has_metadata(name)"><variable citdl="NullProvider" ilk="argument" line="1610" name="self" /><variable ilk="argument" line="1610" name="name" /></scope><scope ilk="function" line="1619" lineend="1622" name="get_metadata" returns="str" signature="get_metadata(name)"><variable citdl="NullProvider" ilk="argument" line="1619" name="self" /><variable ilk="argument" line="1619" name="name" /></scope><scope ilk="function" line="1624" lineend="1625" name="get_metadata_lines" returns="yield_lines()" signature="get_metadata_lines(name)"><variable citdl="NullProvider" ilk="argument" line="1624" name="self" /><variable ilk="argument" line="1624" name="name" /></scope><scope ilk="function" line="1627" lineend="1628" name="resource_isdir" returns="self._isdir()" signature="resource_isdir(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1627" name="self" /><variable ilk="argument" line="1627" name="resource_name" /></scope><scope ilk="function" line="1630" lineend="1631" name="metadata_isdir" returns="self._isdir()" signature="metadata_isdir(name)"><variable citdl="NullProvider" ilk="argument" line="1630" name="self" /><variable ilk="argument" line="1630" name="name" /></scope><scope ilk="function" line="1633" lineend="1634" name="resource_listdir" returns="self._listdir()" signature="resource_listdir(resource_name)"><variable citdl="NullProvider" ilk="argument" line="1633" name="self" /><variable ilk="argument" line="1633" name="resource_name" /></scope><scope ilk="function" line="1636" lineend="1639" name="metadata_listdir" returns="list" signature="metadata_listdir(name)"><variable citdl="NullProvider" ilk="argument" line="1636" name="self" /><variable ilk="argument" line="1636" name="name" /></scope><scope ilk="function" line="1641" lineend="1659" name="run_script" signature="run_script(script_name, namespace)"><import line="1654" module="linecache" symbol="cache" /><variable citdl="NullProvider" ilk="argument" line="1641" name="self" /><variable ilk="argument" line="1641" name="script_name" /><variable ilk="argument" line="1641" name="namespace" /><variable line="1642" name="script" /><variable citdl="script_text.replace()" line="1645" name="script_text" /><variable citdl="self._fn()" line="1647" name="script_filename" /><variable line="1650" name="source" /><variable citdl="compile()" line="1651" name="code" /><variable citdl="compile()" line="1658" name="script_code" /></scope><scope attributes="protected" ilk="function" line="1661" lineend="1663" name="_has" signature="_has(path)"><variable citdl="NullProvider" ilk="argument" line="1661" name="self" /><variable ilk="argument" line="1661" name="path" /></scope><scope attributes="protected" ilk="function" line="1666" lineend="1668" name="_isdir" signature="_isdir(path)"><variable citdl="NullProvider" ilk="argument" line="1666" name="self" /><variable ilk="argument" line="1666" name="path" /></scope><scope attributes="protected" ilk="function" line="1671" lineend="1673" name="_listdir" signature="_listdir(path)"><variable citdl="NullProvider" ilk="argument" line="1671" name="self" /><variable ilk="argument" line="1671" name="path" /></scope><scope attributes="protected" ilk="function" line="1676" lineend="1679" name="_fn" returns="os.path.join()" signature="_fn(base, resource_name)"><variable citdl="NullProvider" ilk="argument" line="1676" name="self" /><variable ilk="argument" line="1676" name="base" /><variable ilk="argument" line="1676" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1681" lineend="1685" name="_get" returns="self.loader.get_data()" signature="_get(path)"><variable citdl="NullProvider" ilk="argument" line="1681" name="self" /><variable ilk="argument" line="1681" name="path" /></scope></scope><scope classrefs="NullProvider" doc="Provider based on a virtual filesystem" ilk="class" line="1691" lineend="1710" name="EggProvider"><scope attributes="__ctor__" ilk="function" line="1694" lineend="1696" name="__init__" signature="EggProvider(module)"><variable citdl="EggProvider" ilk="argument" line="1694" name="self" /><variable ilk="argument" line="1694" name="module" /></scope><scope attributes="protected" ilk="function" line="1698" lineend="1710" name="_setup_prefix" signature="_setup_prefix()"><variable citdl="EggProvider" ilk="argument" line="1698" name="self" /><variable citdl="self.module_path" line="1701" name="path" /><variable citdl="self.module_path" line="1702" name="old" /><variable line="1710" name="base" /></scope><variable attributes="__instancevar__" citdl="os.path.basename()" line="1705" name="egg_name" /><variable attributes="__instancevar__" citdl="os.path.join()" line="1706" name="egg_info" /><variable attributes="__instancevar__" citdl="self.module_path" line="1707" name="egg_root" /></scope><scope classrefs="EggProvider" doc="Provides access to package resources in the filesystem" ilk="class" line="1712" lineend="1729" name="DefaultProvider"><scope attributes="protected" ilk="function" line="1715" lineend="1716" name="_has" returns="os.path.exists()" signature="_has(path)"><variable citdl="DefaultProvider" ilk="argument" line="1715" name="self" /><variable ilk="argument" line="1715" name="path" /></scope><scope attributes="protected" ilk="function" line="1718" lineend="1719" name="_isdir" returns="os.path.isdir()" signature="_isdir(path)"><variable citdl="DefaultProvider" ilk="argument" line="1718" name="self" /><variable ilk="argument" line="1718" name="path" /></scope><scope attributes="protected" ilk="function" line="1721" lineend="1722" name="_listdir" returns="os.listdir()" signature="_listdir(path)"><variable citdl="DefaultProvider" ilk="argument" line="1721" name="self" /><variable ilk="argument" line="1721" name="path" /></scope><scope ilk="function" line="1724" lineend="1725" name="get_resource_stream" returns="open()" signature="get_resource_stream(manager, resource_name)"><variable citdl="DefaultProvider" ilk="argument" line="1724" name="self" /><variable ilk="argument" line="1724" name="manager" /><variable ilk="argument" line="1724" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1727" lineend="1729" name="_get" returns="stream.read()" signature="_get(path)"><variable citdl="DefaultProvider" ilk="argument" line="1727" name="self" /><variable ilk="argument" line="1727" name="path" /></scope></scope><scope classrefs="NullProvider" doc="Provider that returns nothing for all requests" ilk="class" line="1737" lineend="1746" name="EmptyProvider"><variable attributes="protected" line="1740" name="_isdir" /><variable attributes="protected" line="1741" name="_get" /><variable attributes="protected" line="1742" name="_listdir" /><variable line="1743" name="module_path" /><scope attributes="__ctor__" ilk="function" line="1745" lineend="1746" name="__init__" signature="EmptyProvider()"><variable citdl="EmptyProvider" ilk="argument" line="1745" name="self" /></scope></scope><variable citdl="EmptyProvider" line="1748" name="empty_provider" /><scope classrefs="dict" doc="zip manifest builder" ilk="class" line="1751" lineend="1775" name="ZipManifests"><scope attributes="__classmethod__" doc="Build a dictionary similar to the zipimport directory&#10;caches, except instead of tuples, store ZipInfo objects.&#10;&#10;Use a platform-specific path separator (os.sep) for the path keys&#10;for compatibility with pypy on Windows." ilk="function" line="1756" lineend="1756" name="build" returns="dict()" signature="build(path) - classmethod"><variable citdl="ZipManifests" ilk="argument" line="1756" name="cls" /><variable ilk="argument" line="1756" name="path" /><variable line="1766" name="items" /></scope><variable citdl="ZipManifests.build" line="1775" name="load" /></scope><scope classrefs="ZipManifests" doc="Memoized zipfile manifests." ilk="class" line="1778" lineend="1795" name="MemoizedZipManifests"><variable citdl="collections.namedtuple()" line="1782" name="manifest_mod" /><scope doc="Load a manifest at path or return a suitable manifest already loaded." ilk="function" line="1784" lineend="1795" name="load" signature="load(path)"><variable citdl="MemoizedZipManifests" ilk="argument" line="1784" name="self" /><variable citdl="os.path.normpath()" ilk="argument" line="1784" name="path" /><variable line="1789" name="mtime" /><variable citdl="self.build()" line="1792" name="manifest" /></scope></scope><scope classrefs="zipfile.ZipFile" doc="Supplement ZipFile class to support context manager for Python 2.6" ilk="class" line="1798" lineend="1815" name="ContextualZipFile"><scope ilk="function" line="1803" lineend="1804" name="__enter__" returns="ContextualZipFile" signature="__enter__()"><variable citdl="ContextualZipFile" ilk="argument" line="1803" name="self" /></scope><scope ilk="function" line="1806" lineend="1807" name="__exit__" signature="__exit__(type, value, traceback)"><variable citdl="ContextualZipFile" ilk="argument" line="1806" name="self" /><variable ilk="argument" line="1806" name="type" /><variable ilk="argument" line="1806" name="value" /><variable ilk="argument" line="1806" name="traceback" /></scope><scope doc="Construct a ZipFile or ContextualZipFile as appropriate" ilk="function" line="1809" lineend="1815" name="__new__" returns="zipfile.ZipFile()" signature="__new__()"><variable attributes="kwargs" citdl="ContextualZipFile" ilk="argument" line="1809" name="cls" /></scope></scope><scope classrefs="EggProvider" doc="Resource support for zips and eggs" ilk="class" line="1818" lineend="1981" name="ZipProvider"><variable citdl="list" line="1821" name="eagers" /><variable attributes="protected" citdl="MemoizedZipManifests" line="1822" name="_zip_manifests" /><scope attributes="__ctor__" ilk="function" line="1824" lineend="1826" name="__init__" signature="ZipProvider(module)"><variable citdl="ZipProvider" ilk="argument" line="1824" name="self" /><variable ilk="argument" line="1824" name="module" /></scope><variable attributes="__instancevar__" line="1826" name="zip_pre" /><scope attributes="protected" ilk="function" line="1828" lineend="1834" name="_zipinfo_name" signature="_zipinfo_name(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1828" name="self" /><variable ilk="argument" line="1828" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1837" lineend="1844" name="_parts" signature="_parts(zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1837" name="self" /><variable ilk="argument" line="1837" name="zip_path" /><variable line="1840" name="fspath" /></scope><variable attributes="property" citdl="self._zip_manifests.load()" line="1847" name="zipinfo" /><scope attributes="__hidden__" ilk="function" line="1847" lineend="1847" name="zipinfo (property getter)" returns="self._zip_manifests.load()" signature="zipinfo (property getter)()"><variable citdl="ZipProvider" ilk="argument" line="1847" name="self" /></scope><scope ilk="function" line="1851" lineend="1862" name="get_resource_filename" returns="self._extract_resource()" signature="get_resource_filename(manager, resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1851" name="self" /><variable ilk="argument" line="1851" name="manager" /><variable ilk="argument" line="1851" name="resource_name" /><variable citdl="self._resource_to_zip()" line="1857" name="zip_path" /><variable citdl="self._get_eager_resources()" line="1858" name="eagers" /><variable line="1860" name="name" /></scope><scope attributes="protected __staticmethod__" ilk="function" line="1864" lineend="1864" name="_get_date_and_size" returns="tuple" signature="_get_date_and_size(zip_stat) - staticmethod"><variable citdl="ZipProvider" ilk="argument" line="1864" name="zip_stat" /><variable citdl="zip_stat.file_size" line="1866" name="size" /><variable line="1868" name="date_time" /><variable citdl="time.mktime()" line="1870" name="timestamp" /></scope><scope attributes="protected" ilk="function" line="1873" lineend="1923" name="_extract_resource" returns="manager.get_cache_path()" signature="_extract_resource(manager, zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1873" name="self" /><variable ilk="argument" line="1873" name="manager" /><variable ilk="argument" line="1873" name="zip_path" /><variable line="1876" name="name" /><variable citdl="()" line="1877" name="last" /><variable line="1883" name="size" /><variable line="1883" name="timestamp" /><variable citdl="manager.get_cache_path()" line="1890" name="real_path" /><variable line="1897" name="tmpnam" /><variable line="1897" name="outf" /></scope><scope attributes="protected" doc="Return True if the file_path is current for this zip_path" ilk="function" line="1925" lineend="1939" name="_is_current" returns="bool" signature="_is_current(file_path, zip_path)"><variable citdl="ZipProvider" ilk="argument" line="1925" name="self" /><variable ilk="argument" line="1925" name="file_path" /><variable ilk="argument" line="1925" name="zip_path" /><variable line="1929" name="timestamp" /><variable line="1929" name="size" /><variable citdl="os.stat()" line="1932" name="stat" /><variable citdl="self.loader.get_data()" line="1936" name="zip_contents" /><variable citdl="f.read()" line="1938" name="file_contents" /></scope><scope attributes="protected" ilk="function" line="1941" lineend="1948" name="_get_eager_resources" returns="list" signature="_get_eager_resources()"><variable citdl="ZipProvider" ilk="argument" line="1941" name="self" /><variable citdl="list" line="1943" name="eagers" /><variable line="1944" name="name" /></scope><scope attributes="protected" ilk="function" line="1950" lineend="1965" name="_index" returns="dict" signature="_index()"><variable citdl="ZipProvider" ilk="argument" line="1950" name="self" /><variable citdl="dict" line="1954" name="ind" /><variable line="1955" name="path" /><variable citdl="path.split()" line="1956" name="parts" /><variable citdl="os.sep.join()" line="1958" name="parent" /></scope><variable attributes="protected __instancevar__" citdl="dict" line="1964" name="_dirindex" /><scope attributes="protected" ilk="function" line="1967" lineend="1969" name="_has" returns="bool" signature="_has(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1967" name="self" /><variable ilk="argument" line="1967" name="fspath" /><variable citdl="_zipinfo_name()" line="1968" name="zip_path" /></scope><scope attributes="protected" ilk="function" line="1971" lineend="1972" name="_isdir" returns="bool" signature="_isdir(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1971" name="self" /><variable ilk="argument" line="1971" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1974" lineend="1975" name="_listdir" returns="list()" signature="_listdir(fspath)"><variable citdl="ZipProvider" ilk="argument" line="1974" name="self" /><variable ilk="argument" line="1974" name="fspath" /></scope><scope attributes="protected" ilk="function" line="1977" lineend="1978" name="_eager_to_zip" returns="ZipProvider._zipinfo_name()" signature="_eager_to_zip(resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1977" name="self" /><variable ilk="argument" line="1977" name="resource_name" /></scope><scope attributes="protected" ilk="function" line="1980" lineend="1981" name="_resource_to_zip" returns="ZipProvider._zipinfo_name()" signature="_resource_to_zip(resource_name)"><variable citdl="ZipProvider" ilk="argument" line="1980" name="self" /><variable ilk="argument" line="1980" name="resource_name" /></scope></scope><scope classrefs="EmptyProvider" doc="Metadata handler for standalone PKG-INFO files&#10;&#10;Usage::&#10;&#10;    metadata = FileMetadata(&quot;/path/to/PKG-INFO&quot;)&#10;&#10;This provider rejects all data and metadata requests except for PKG-INFO,&#10;which is treated as existing, and will be the contents of the file at&#10;the provided location." ilk="class" line="1986" lineend="2012" name="FileMetadata"><scope attributes="__ctor__" ilk="function" line="1998" lineend="1999" name="__init__" signature="FileMetadata(path)"><variable citdl="FileMetadata" ilk="argument" line="1998" name="self" /><variable ilk="argument" line="1998" name="path" /></scope><variable attributes="__instancevar__" line="1999" name="path" /><scope ilk="function" line="2001" lineend="2002" name="has_metadata" returns="bool" signature="has_metadata(name)"><variable citdl="FileMetadata" ilk="argument" line="2001" name="self" /><variable ilk="argument" line="2001" name="name" /></scope><scope ilk="function" line="2004" lineend="2009" name="get_metadata" returns="f.read()" signature="get_metadata(name)"><variable citdl="FileMetadata" ilk="argument" line="2004" name="self" /><variable ilk="argument" line="2004" name="name" /><variable citdl="f.read()" line="2007" name="metadata" /></scope><scope ilk="function" line="2011" lineend="2012" name="get_metadata_lines" returns="yield_lines()" signature="get_metadata_lines(name)"><variable citdl="FileMetadata" ilk="argument" line="2011" name="self" /><variable ilk="argument" line="2011" name="name" /></scope></scope><scope classrefs="DefaultProvider" doc="Metadata provider for egg directories&#10;&#10;Usage::&#10;&#10;&#10;&#10;    egg_info = &quot;/path/to/PackageName.egg-info&quot;&#10;    base_dir = os.path.dirname(egg_info)&#10;    metadata = PathMetadata(base_dir, egg_info)&#10;    dist_name = os.path.splitext(os.path.basename(egg_info))[0]&#10;    dist = Distribution(basedir, project_name=dist_name, metadata=metadata)&#10;&#10;&#10;&#10;    egg_path = &quot;/path/to/PackageName-ver-pyver-etc.egg&quot;&#10;    metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))&#10;    dist = Distribution.from_filename(egg_path, metadata=metadata)" ilk="class" line="2015" lineend="2037" name="PathMetadata"><scope attributes="__ctor__" ilk="function" line="2035" lineend="2037" name="__init__" signature="PathMetadata(path, egg_info)"><variable citdl="PathMetadata" ilk="argument" line="2035" name="self" /><variable ilk="argument" line="2035" name="path" /><variable ilk="argument" line="2035" name="egg_info" /></scope><variable attributes="__instancevar__" line="2036" name="module_path" /><variable attributes="__instancevar__" line="2037" name="egg_info" /></scope><scope classrefs="ZipProvider" doc="Metadata provider for .egg files" ilk="class" line="2040" lineend="2052" name="EggMetadata"><scope attributes="__ctor__" doc="Create a metadata provider from a zipimporter" ilk="function" line="2043" lineend="2052" name="__init__" signature="EggMetadata(importer)"><variable citdl="EggMetadata" ilk="argument" line="2043" name="self" /><variable ilk="argument" line="2043" name="importer" /></scope><variable attributes="__instancevar__" line="2046" name="zip_pre" /><variable attributes="__instancevar__" line="2047" name="loader" /><variable attributes="__instancevar__" citdl="os.path.join()" line="2049" name="module_path" /></scope><scope doc="Register `distribution_finder` to find distributions in sys.path items&#10;&#10;`importer_type` is the type or class of a PEP 302 &quot;Importer&quot; (sys.path item&#10;handler), and `distribution_finder` is a callable that, passed a path&#10;item and the importer instance, yields ``Distribution`` instances found on&#10;that path item.  See ``pkg_resources.find_on_path`` for an example." ilk="function" line="2056" lineend="2063" name="register_finder" signature="register_finder(importer_type, distribution_finder)"><variable ilk="argument" line="2056" name="importer_type" /><variable ilk="argument" line="2056" name="distribution_finder" /></scope><scope doc="Yield distributions accessible via `path_item`" ilk="function" line="2066" lineend="2070" name="find_distributions" returns="find_distributions.finder()" signature="find_distributions(path_item, only=False)"><variable ilk="argument" line="2066" name="path_item" /><variable citdl="False" ilk="argument" line="2066" name="only" /><variable citdl="get_importer()" line="2068" name="importer" /><variable citdl="_find_adapter()" line="2069" name="finder" /></scope><scope doc="Find eggs in zip files; possibly multiple nested eggs." ilk="function" line="2072" lineend="2090" name="find_eggs_in_zip" signature="find_eggs_in_zip(importer, path_item, only=False)"><variable ilk="argument" line="2072" name="importer" /><variable ilk="argument" line="2072" name="path_item" /><variable citdl="False" ilk="argument" line="2072" name="only" /><variable citdl="EggMetadata" line="2080" name="metadata" /><variable line="2086" name="subitem" /><variable citdl="os.path.join()" line="2088" name="subpath" /><variable line="2089" name="dist" /></scope><scope ilk="function" line="2094" lineend="2095" name="find_nothing" returns="tuple" signature="find_nothing(importer, path_item, only=False)"><variable ilk="argument" line="2094" name="importer" /><variable ilk="argument" line="2094" name="path_item" /><variable citdl="False" ilk="argument" line="2094" name="only" /></scope><scope doc="Yield distributions accessible on a sys.path directory" ilk="function" line="2098" lineend="2138" name="find_on_path" signature="find_on_path(importer, path_item, only=False)"><variable ilk="argument" line="2098" name="importer" /><variable citdl="_normalize_cached()" ilk="argument" line="2098" name="path_item" /><variable citdl="False" ilk="argument" line="2098" name="only" /><variable line="2112" name="entry" /><variable citdl="entry.lower()" line="2113" name="lower" /><variable citdl="os.path.join()" line="2115" name="fullpath" /><variable citdl="PathMetadata" line="2118" name="metadata" /><variable citdl="find_distributions()" line="2125" name="dists" /><variable line="2126" name="dist" /><variable citdl="entry_file.readlines()" line="2130" name="entry_lines" /><variable line="2131" name="line" /><variable citdl="os.path.join()" line="2134" name="path" /><variable line="2136" name="item" /></scope><scope doc="Register `namespace_handler` to declare namespace packages&#10;&#10;`importer_type` is the type or class of a PEP 302 &quot;Importer&quot; (sys.path item&#10;handler), and `namespace_handler` is a callable like this::&#10;&#10;    def namespace_handler(importer, path_entry, moduleName, module):&#10;&#10;&#10;Namespace handlers are only called if the importer object has already&#10;agreed that it can handle the relevant path item, and they should only&#10;return a subpath if the module __path__ does not already contain an&#10;equivalent subpath.  For an example namespace handler, see&#10;``pkg_resources.file_ns_handler``." ilk="function" line="2148" lineend="2163" name="register_namespace_handler" signature="register_namespace_handler(importer_type, namespace_handler)"><variable ilk="argument" line="2148" name="importer_type" /><variable ilk="argument" line="2148" name="namespace_handler" /></scope><scope attributes="protected" doc="Ensure that named package includes a subpath of path_item (if needed)" ilk="function" line="2165" lineend="2190" name="_handle_ns" returns="handler()" signature="_handle_ns(packageName, path_item)"><variable ilk="argument" line="2165" name="packageName" /><variable ilk="argument" line="2165" name="path_item" /><variable citdl="get_importer()" line="2168" name="importer" /><variable citdl="importer.find_module()" line="2171" name="loader" /><variable citdl="sys.modules.get()" line="2174" name="module" /><variable citdl="_find_adapter()" line="2181" name="handler" /><variable citdl="handler()" line="2182" name="subpath" /><variable citdl="list" line="2184" name="path" /></scope><scope doc="Declare that package 'packageName' is a namespace package" ilk="function" line="2192" lineend="2222" name="declare_namespace" signature="declare_namespace(packageName)"><variable ilk="argument" line="2192" name="packageName" /><variable citdl="sys.path" line="2200" name="path" /><variable citdl="__builtins__.str.join()" line="2200" name="parent" /><variable line="2216" name="path_item" /></scope><scope doc="Ensure that previously-declared namespace packages include path_item" ilk="function" line="2224" lineend="2233" name="fixup_namespace_packages" signature="fixup_namespace_packages(path_item, parent=None)"><variable ilk="argument" line="2224" name="path_item" /><variable ilk="argument" line="2224" name="parent" /><variable line="2228" name="package" /><variable citdl="_handle_ns()" line="2229" name="subpath" /></scope><scope doc="Compute an ns-package subpath for a filesystem or zipfile importer" ilk="function" line="2235" lineend="2245" name="file_ns_handler" returns="os.path.join()" signature="file_ns_handler(importer, path_item, packageName, module)"><variable ilk="argument" line="2235" name="importer" /><variable ilk="argument" line="2235" name="path_item" /><variable ilk="argument" line="2235" name="packageName" /><variable ilk="argument" line="2235" name="module" /><variable citdl="os.path.join()" line="2238" name="subpath" /><variable citdl="_normalize_cached()" line="2239" name="normalized" /><variable line="2240" name="item" /></scope><scope ilk="function" line="2254" lineend="2255" name="null_ns_handler" signature="null_ns_handler(importer, path_item, packageName, module)"><variable ilk="argument" line="2254" name="importer" /><variable ilk="argument" line="2254" name="path_item" /><variable ilk="argument" line="2254" name="packageName" /><variable ilk="argument" line="2254" name="module" /></scope><scope doc="Normalize a file/dir name for comparison purposes" ilk="function" line="2260" lineend="2262" name="normalize_path" returns="os.path.normcase()" signature="normalize_path(filename)"><variable ilk="argument" line="2260" name="filename" /></scope><scope attributes="protected" ilk="function" line="2264" lineend="2269" name="_normalize_cached" returns="result" signature="_normalize_cached(filename, _cache={})"><variable ilk="argument" line="2264" name="filename" /><variable citdl="dict" ilk="argument" line="2264" name="_cache" /></scope><scope attributes="protected" ilk="function" line="2271" lineend="2276" name="_set_parent_ns" signature="_set_parent_ns(packageName)"><variable ilk="argument" line="2271" name="packageName" /><variable citdl="packageName.split()" line="2272" name="parts" /><variable citdl="parts.pop()" line="2273" name="name" /><variable citdl="__builtins__.str.join()" line="2275" name="parent" /></scope><scope doc="Yield non-empty/non-comment lines of a string or sequence" ilk="function" line="2279" lineend="2290" name="yield_lines" signature="yield_lines(strs)"><variable ilk="argument" line="2279" name="strs" /><variable citdl="s.strip()" line="2282" name="s" /><variable line="2288" name="ss" /></scope><variable line="2293" name="LINE_END" /><variable line="2295" name="CONTINUE" /><variable line="2297" name="DISTRO" /><variable line="2299" name="VERSION" /><variable line="2301" name="COMMA" /><variable line="2302" name="OBRACKET" /><variable line="2303" name="CBRACKET" /><variable line="2304" name="MODULE" /><variable line="2305" name="EGG_NAME" /><scope classrefs="object" doc="Object representing an advertised importable object" ilk="class" line="2319" lineend="2425" name="EntryPoint"><scope attributes="__ctor__" ilk="function" line="2322" lineend="2329" name="__init__" signature="EntryPoint(name, module_name, attrs=(), extras=(), dist=None)"><variable citdl="EntryPoint" ilk="argument" line="2322" name="self" /><variable ilk="argument" line="2322" name="name" /><variable ilk="argument" line="2322" name="module_name" /><variable citdl="tuple" ilk="argument" line="2322" name="attrs" /><variable citdl="tuple" ilk="argument" line="2322" name="extras" /><variable ilk="argument" line="2322" name="dist" /></scope><variable attributes="__instancevar__" line="2325" name="name" /><variable attributes="__instancevar__" line="2326" name="module_name" /><variable attributes="__instancevar__" citdl="tuple()" line="2327" name="attrs" /><variable attributes="__instancevar__" line="2328" name="extras" /><variable attributes="__instancevar__" line="2329" name="dist" /><scope ilk="function" line="2331" lineend="2337" name="__str__" signature="__str__()"><variable citdl="EntryPoint" ilk="argument" line="2331" name="self" /><variable line="2332" name="s" /></scope><scope ilk="function" line="2339" lineend="2340" name="__repr__" signature="__repr__()"><variable citdl="EntryPoint" ilk="argument" line="2339" name="self" /></scope><scope doc="Require packages for this EntryPoint, then resolve it." ilk="function" line="2342" lineend="2355" name="load" returns="self.resolve()" signature="load(**require)"><variable attributes="varargs" citdl="EntryPoint" ilk="argument" line="2342" name="self" /><variable attributes="kwargs" ilk="argument" line="2342" name="require" /></scope><scope doc="Resolve the entry point from its module and attrs." ilk="function" line="2357" lineend="2365" name="resolve" returns="functools.reduce()" signature="resolve()"><variable citdl="EntryPoint" ilk="argument" line="2357" name="self" /><variable citdl="__import__()" line="2361" name="module" /></scope><scope ilk="function" line="2367" lineend="2372" name="require" signature="require(env=None, installer=None)"><variable citdl="EntryPoint" ilk="argument" line="2367" name="self" /><variable ilk="argument" line="2367" name="env" /><variable ilk="argument" line="2367" name="installer" /><variable citdl="self.dist.requires()" line="2370" name="reqs" /><variable citdl="working_set.resolve()" line="2371" name="items" /></scope><variable citdl="re.compile()" line="2374" name="pattern" /><scope attributes="__classmethod__" doc="Parse a single entry point from string `src`&#10;&#10;Entry point syntax follows the form::&#10;&#10;    name = some.module:some.attr [extra1, extra2]&#10;&#10;The entry name and module name are required, but the ``:attrs`` and&#10;``[extras]`` parts are optional" ilk="function" line="2383" lineend="2383" name="parse" returns="EntryPoint.parse.cls()" signature="parse(src, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2383" name="cls" /><variable ilk="argument" line="2383" name="src" /><variable ilk="argument" line="2383" name="dist" /><variable citdl="cls.pattern.match()" line="2394" name="m" /><variable citdl="str" line="2396" name="msg" /><variable citdl="m.groupdict()" line="2398" name="res" /><variable citdl="cls._parse_extras()" line="2399" name="extras" /><variable line="2400" name="attrs" /></scope><scope attributes="protected __classmethod__" ilk="function" line="2403" lineend="2403" name="_parse_extras" returns="tuple" signature="_parse_extras(extras_spec) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2403" name="cls" /><variable ilk="argument" line="2403" name="extras_spec" /><variable citdl="Requirement.parse()" line="2407" name="req" /></scope><scope attributes="__classmethod__" doc="Parse an entry point group" ilk="function" line="2412" lineend="2412" name="parse_group" returns="dict" signature="parse_group(group, lines, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2412" name="cls" /><variable ilk="argument" line="2412" name="group" /><variable ilk="argument" line="2412" name="lines" /><variable ilk="argument" line="2412" name="dist" /><variable citdl="dict" line="2417" name="this" /><variable line="2418" name="line" /><variable citdl="parse()" line="2419" name="ep" /></scope><scope attributes="__classmethod__" doc="Parse a map of entry point groups" ilk="function" line="2425" lineend="2425" name="parse_map" returns="dict" signature="parse_map(data, dist=None) - classmethod"><variable citdl="EntryPoint" ilk="argument" line="2425" name="cls" /><variable citdl="split_sections()" ilk="argument" line="2425" name="data" /><variable ilk="argument" line="2425" name="dist" /><variable citdl="dict" line="2432" name="maps" /><variable citdl="group.strip()" line="2433" name="group" /><variable line="2433" name="lines" /></scope></scope><scope attributes="protected" ilk="function" line="2445" lineend="2451" name="_remove_md5_fragment" returns="str" signature="_remove_md5_fragment(location)"><variable ilk="argument" line="2445" name="location" /><variable citdl="urlparse()" line="2448" name="parsed" /></scope><scope classrefs="object" doc="Wrap an actual or potential sys.path entry w/metadata" ilk="class" line="2454" lineend="2778" name="Distribution"><variable citdl="str" line="2456" name="PKG_INFO" /><scope attributes="__ctor__" ilk="function" line="2458" lineend="2468" name="__init__" signature="Distribution(location=None, metadata=None, project_name=None, version=None, py_version=PY_MAJOR, platform=None, precedence=EGG_DIST)"><variable citdl="Distribution" ilk="argument" line="2458" name="self" /><variable ilk="argument" line="2458" name="location" /><variable ilk="argument" line="2458" name="metadata" /><variable ilk="argument" line="2458" name="project_name" /><variable ilk="argument" line="2458" name="version" /><variable ilk="argument" line="2458" name="py_version" /><variable ilk="argument" line="2458" name="platform" /><variable citdl="int" ilk="argument" line="2458" name="precedence" /></scope><variable attributes="__instancevar__" citdl="safe_name()" line="2461" name="project_name" /><variable attributes="protected __instancevar__" citdl="safe_version()" line="2463" name="_version" /><variable attributes="__instancevar__" line="2464" name="py_version" /><variable attributes="__instancevar__" line="2465" name="platform" /><variable attributes="__instancevar__" line="2466" name="location" /><variable attributes="__instancevar__" citdl="int" line="2467" name="precedence" /><variable attributes="protected __instancevar__" citdl="EmptyProvider" line="2468" name="_provider" /><scope attributes="__classmethod__" ilk="function" line="2470" lineend="2470" name="from_location" returns="Distribution.from_location.cls()" signature="from_location(location, basename=None, **metadata) - classmethod"><variable citdl="Distribution" ilk="argument" line="2470" name="cls" /><variable ilk="argument" line="2470" name="location" /><variable ilk="argument" line="2470" name="basename" /><variable attributes="kwargs" ilk="argument" line="2470" name="metadata" /><variable line="2473" name="ext" /><variable citdl="EGG_NAME()" line="2476" name="match" /><variable line="2478" name="version" /><variable line="2478" name="py_version" /><variable line="2478" name="platform" /><variable line="2478" name="project_name" /></scope><scope attributes="__hidden__" ilk="function" line="2487" lineend="2487" name="hashcmp (property getter)" returns="tuple" signature="hashcmp (property getter)()"><variable citdl="Distribution" ilk="argument" line="2487" name="self" /></scope><variable attributes="property" citdl="tuple" line="2487" name="hashcmp" /><scope ilk="function" line="2498" lineend="2499" name="__hash__" returns="hash()" signature="__hash__()"><variable citdl="Distribution" ilk="argument" line="2498" name="self" /></scope><scope ilk="function" line="2501" lineend="2502" name="__lt__" returns="bool" signature="__lt__(other)"><variable citdl="Distribution" ilk="argument" line="2501" name="self" /><variable ilk="argument" line="2501" name="other" /></scope><scope ilk="function" line="2504" lineend="2505" name="__le__" returns="bool" signature="__le__(other)"><variable citdl="Distribution" ilk="argument" line="2504" name="self" /><variable ilk="argument" line="2504" name="other" /></scope><scope ilk="function" line="2507" lineend="2508" name="__gt__" returns="bool" signature="__gt__(other)"><variable citdl="Distribution" ilk="argument" line="2507" name="self" /><variable ilk="argument" line="2507" name="other" /></scope><scope ilk="function" line="2510" lineend="2511" name="__ge__" returns="bool" signature="__ge__(other)"><variable citdl="Distribution" ilk="argument" line="2510" name="self" /><variable ilk="argument" line="2510" name="other" /></scope><scope ilk="function" line="2513" lineend="2517" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="Distribution" ilk="argument" line="2513" name="self" /><variable ilk="argument" line="2513" name="other" /></scope><scope ilk="function" line="2519" lineend="2520" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="Distribution" ilk="argument" line="2519" name="self" /><variable ilk="argument" line="2519" name="other" /></scope><variable attributes="property" citdl="self._key" line="2526" name="key" /><scope attributes="__hidden__" ilk="function" line="2526" lineend="2526" name="key (property getter)" returns="self._key" signature="key (property getter)()"><variable citdl="Distribution" ilk="argument" line="2526" name="self" /></scope><variable attributes="protected __instancevar__" citdl="self.project_name.lower()" line="2531" name="_key" /><variable attributes="property" citdl="parse_version()" line="2534" name="parsed_version" /><scope attributes="__hidden__" ilk="function" line="2534" lineend="2534" name="parsed_version (property getter)" returns="parse_version()" signature="parsed_version (property getter)()"><variable citdl="Distribution" ilk="argument" line="2534" name="self" /></scope><variable attributes="protected __instancevar__" citdl="parse_version()" line="2537" name="_parsed_version" /><scope attributes="protected" ilk="function" line="2541" lineend="2565" name="_warn_legacy_version" signature="_warn_legacy_version()"><variable citdl="Distribution" ilk="argument" line="2541" name="self" /><variable citdl="packaging.version.LegacyVersion" line="2542" name="LV" /><variable citdl="isinstance()" line="2543" name="is_legacy" /><variable line="2556" name="tmpl" /></scope><scope attributes="__hidden__" ilk="function" line="2567" lineend="2567" name="version (property getter)" returns="safe_version()" signature="version (property getter)()"><variable citdl="Distribution" ilk="argument" line="2567" name="self" /><variable line="2572" name="line" /><variable citdl="str" line="2577" name="tmpl" /></scope><variable attributes="property" citdl="safe_version()" line="2567" name="version" /><variable attributes="property protected" citdl="self.__dep_map" line="2580" name="_dep_map" /><scope attributes="protected __hidden__" ilk="function" line="2580" lineend="2580" name="_dep_map (property getter)" returns="dict" signature="_dep_map (property getter)()"><variable citdl="Distribution" ilk="argument" line="2580" name="self" /><variable citdl="dict" line="2585" name="dm" /><variable line="2586" name="name" /><variable citdl="safe_extra()" line="2587" name="extra" /><variable citdl="list" line="2587" name="reqs" /><variable line="2590" name="marker" /></scope><scope doc="List of Requirements needed for this distro if `extras` are used" ilk="function" line="2600" lineend="2612" name="requires" returns="list" signature="requires(extras=())"><variable citdl="Distribution" ilk="argument" line="2600" name="self" /><variable citdl="tuple" ilk="argument" line="2600" name="extras" /><variable citdl="self.__dep_map" line="2602" name="dm" /><variable citdl="list" line="2603" name="deps" /><variable line="2605" name="ext" /></scope><scope attributes="protected" ilk="function" line="2614" lineend="2617" name="_get_metadata" signature="_get_metadata(name)"><variable citdl="Distribution" ilk="argument" line="2614" name="self" /><variable ilk="argument" line="2614" name="name" /><variable line="2616" name="line" /></scope><scope doc="Ensure distribution is importable on `path` (default=sys.path)" ilk="function" line="2619" lineend="2628" name="activate" signature="activate(path=None)"><variable citdl="Distribution" ilk="argument" line="2619" name="self" /><variable citdl="sys.path" ilk="argument" line="2619" name="path" /><variable line="2626" name="pkg" /></scope><scope doc="Return what this distribution's standard .egg filename should be" ilk="function" line="2630" lineend="2639" name="egg_name" signature="egg_name()"><variable citdl="Distribution" ilk="argument" line="2630" name="self" /><variable line="2632" name="filename" /></scope><scope ilk="function" line="2641" lineend="2645" name="__repr__" returns="str()" signature="__repr__()"><variable citdl="Distribution" ilk="argument" line="2641" name="self" /></scope><scope ilk="function" line="2647" lineend="2653" name="__str__" signature="__str__()"><variable citdl="Distribution" ilk="argument" line="2647" name="self" /><variable citdl="getattr()" line="2649" name="version" /></scope><scope doc="Delegate all unrecognized public attributes to .metadata provider" ilk="function" line="2655" lineend="2659" name="__getattr__" returns="getattr()" signature="__getattr__(attr)"><variable citdl="Distribution" ilk="argument" line="2655" name="self" /><variable ilk="argument" line="2655" name="attr" /></scope><scope attributes="__classmethod__" ilk="function" line="2661" lineend="2661" name="from_filename" returns="Distribution.from_location()" signature="from_filename(filename=None, **metadata) - classmethod"><variable citdl="Distribution" ilk="argument" line="2661" name="cls" /><variable ilk="argument" line="2661" name="filename" /><variable attributes="kwargs" ilk="argument" line="2661" name="metadata" /></scope><scope doc="Return a ``Requirement`` that matches this distribution exactly" ilk="function" line="2668" lineend="2675" name="as_requirement" returns="Requirement.parse()" signature="as_requirement()"><variable citdl="Distribution" ilk="argument" line="2668" name="self" /><variable line="2671" name="spec" /></scope><scope doc="Return the `name` entry point of `group` or raise ImportError" ilk="function" line="2677" lineend="2682" name="load_entry_point" returns="ep.load()" signature="load_entry_point(group, name)"><variable citdl="Distribution" ilk="argument" line="2677" name="self" /><variable ilk="argument" line="2677" name="group" /><variable ilk="argument" line="2677" name="name" /><variable citdl="self.get_entry_info()" line="2679" name="ep" /></scope><scope doc="Return the entry point map for `group`, or the full entry map" ilk="function" line="2684" lineend="2694" name="get_entry_map" returns="ep_map.get()" signature="get_entry_map(group=None)"><variable citdl="Distribution" ilk="argument" line="2684" name="self" /><variable ilk="argument" line="2684" name="group" /><variable citdl="EntryPoint.parse_map()" line="2687" name="ep_map" /></scope><scope doc="Return the EntryPoint object for `group`+`name`, or ``None``" ilk="function" line="2696" lineend="2698" name="get_entry_info" signature="get_entry_info(group, name)"><variable citdl="Distribution" ilk="argument" line="2696" name="self" /><variable ilk="argument" line="2696" name="group" /><variable ilk="argument" line="2696" name="name" /></scope><scope doc="Insert self.location in path before its nearest parent directory" ilk="function" line="2700" lineend="2738" name="insert_on" signature="insert_on(path, loc=None)"><variable citdl="Distribution" ilk="argument" line="2700" name="self" /><variable ilk="argument" line="2700" name="path" /><variable ilk="argument" line="2700" name="loc" /><variable citdl="_normalize_cached()" line="2707" name="nloc" /><variable citdl="os.path.dirname()" line="2708" name="bdir" /><variable citdl="list" line="2709" name="npath" /><variable line="2711" name="item" /><variable citdl="npath.index()" line="2711" name="p" /><variable citdl="npath.index()" line="2730" name="np" /></scope><scope ilk="function" line="2740" lineend="2759" name="check_version_conflict" signature="check_version_conflict()"><variable citdl="Distribution" ilk="argument" line="2740" name="self" /><variable citdl="dict.fromkeys()" line="2745" name="nsp" /><variable citdl="normalize_path()" line="2746" name="loc" /><variable line="2747" name="modname" /><variable citdl="getattr()" line="2753" name="fn" /></scope><scope ilk="function" line="2762" lineend="2768" name="has_version" returns="bool" signature="has_version()"><variable citdl="Distribution" ilk="argument" line="2762" name="self" /></scope><scope doc="Copy this distribution, substituting in any changed keyword args" ilk="function" line="2770" lineend="2776" name="clone" returns="self.__class__()" signature="clone()"><variable attributes="kwargs" citdl="Distribution" ilk="argument" line="2770" name="self" /><variable citdl="str" line="2772" name="names" /><variable line="2773" name="attr" /></scope><scope attributes="__hidden__" ilk="function" line="2778" lineend="2778" name="extras (property getter)" returns="list" signature="extras (property getter)()"><variable citdl="Distribution" ilk="argument" line="2778" name="self" /></scope><variable attributes="property" citdl="list" line="2778" name="extras" /></scope><scope classrefs="Distribution" doc="Wrap an actual or potential sys.path entry w/metadata, .dist-info style" ilk="class" line="2783" lineend="2843" name="DistInfoDistribution"><variable citdl="str" line="2785" name="PKG_INFO" /><variable citdl="re.compile()" line="2786" name="EQEQ" /><variable attributes="property protected" citdl="self._pkg_info" line="2788" name="_parsed_pkg_info" /><scope attributes="protected __hidden__" doc="Parse and cache metadata" ilk="function" line="2788" lineend="2788" name="_parsed_pkg_info (property getter)" returns="self._pkg_info" signature="_parsed_pkg_info (property getter)()"><variable citdl="DistInfoDistribution" ilk="argument" line="2788" name="self" /><variable citdl="self.get_metadata()" line="2794" name="metadata" /></scope><variable attributes="protected __instancevar__" line="2795" name="_pkg_info" /><variable attributes="property protected" citdl="self._compute_dependencies()" line="2798" name="_dep_map" /><scope attributes="protected __hidden__" ilk="function" line="2798" lineend="2798" name="_dep_map (property getter)" returns="self.__dep_map" signature="_dep_map (property getter)()"><variable citdl="DistInfoDistribution" ilk="argument" line="2798" name="self" /></scope><variable attributes="private __instancevar__" citdl="self._compute_dependencies()" line="2803" name="__dep_map" /><scope attributes="protected" doc="Convert 'Foobar (1); baz' to ('Foobar ==1', 'baz')&#10;Split environment marker, add == prefix to version specifiers as&#10;necessary, and remove parenthesis." ilk="function" line="2806" lineend="2816" name="_preparse_requirement" returns="tuple" signature="_preparse_requirement(requires_dist)"><variable citdl="DistInfoDistribution" ilk="argument" line="2806" name="self" /><variable ilk="argument" line="2806" name="requires_dist" /><variable line="2811" name="parts" /><variable citdl="re.sub()" line="2812" name="distvers" /><variable line="2813" name="mark" /></scope><scope attributes="protected" doc="Recompute this distribution's dependencies." ilk="function" line="2818" lineend="2843" name="_compute_dependencies" returns="dict" signature="_compute_dependencies()"><import alias="compile_marker" line="2820" module="_markerlib" symbol="compile" /><variable citdl="DistInfoDistribution" ilk="argument" line="2818" name="self" /><variable citdl="dict" line="2821" name="dm" /><variable citdl="list" line="2823" name="reqs" /><variable line="2825" name="req" /><variable line="2826" name="distvers" /><variable line="2826" name="mark" /><variable citdl="next()" line="2827" name="parsed" /><scope ilk="function" line="2831" lineend="2834" name="reqs_for_extra" signature="reqs_for_extra(extra)"><variable ilk="argument" line="2831" name="extra" /><variable line="2832" name="req" /></scope><variable citdl="frozenset()" line="2836" name="common" /><variable citdl="safe_extra()" line="2839" name="extra" /></scope></scope><variable attributes="protected" citdl="dict" line="2846" name="_distributionImpl" /><scope ilk="function" line="2853" lineend="2863" name="issue_warning" signature="issue_warning()"><variable citdl="int" line="2854" name="level" /><variable citdl="globals()" line="2855" name="g" /></scope><scope classrefs="ValueError" ilk="class" line="2866" lineend="2868" name="RequirementParseError"><scope ilk="function" line="2867" lineend="2868" name="__str__" returns="__builtins__.str.join()" signature="__str__()"><variable citdl="RequirementParseError" ilk="argument" line="2867" name="self" /></scope></scope><scope doc="Yield ``Requirement`` objects for each specification in `strs`&#10;&#10;`strs` must be a string, or a (possibly-nested) iterable thereof." ilk="function" line="2871" lineend="2932" name="parse_requirements" signature="parse_requirements(strs)"><variable ilk="argument" line="2871" name="strs" /><variable citdl="iter()" line="2877" name="lines" /><scope ilk="function" line="2879" lineend="2912" name="scan_list" returns="tuple" signature="scan_list(ITEM, TERMINATOR, line, p, groups, item_name)"><variable ilk="argument" line="2879" name="ITEM" /><variable ilk="argument" line="2879" name="TERMINATOR" /><variable citdl="next()" ilk="argument" line="2879" name="line" /><variable citdl="match.end()" ilk="argument" line="2879" name="p" /><variable ilk="argument" line="2879" name="groups" /><variable ilk="argument" line="2879" name="item_name" /><variable citdl="list" line="2881" name="items" /><variable citdl="str" line="2889" name="msg" /><variable citdl="ITEM()" line="2892" name="match" /></scope><variable line="2914" name="line" /><variable citdl="OBRACKET()" line="2915" name="match" /><variable citdl="match.group()" line="2918" name="project_name" /><variable citdl="match.end()" line="2919" name="p" /><variable citdl="list" line="2920" name="extras" /><variable citdl="list" line="2929" name="specs" /></scope><scope ilk="class" line="2935" lineend="2984" name="Requirement"><scope attributes="__ctor__" doc="DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!" ilk="function" line="2936" lineend="2950" name="__init__" signature="Requirement(project_name, specs, extras)"><variable citdl="Requirement" ilk="argument" line="2936" name="self" /><variable citdl="safe_name()" ilk="argument" line="2936" name="project_name" /><variable ilk="argument" line="2936" name="specs" /><variable ilk="argument" line="2936" name="extras" /></scope><variable attributes="__instancevar__" line="2938" name="unsafe_name" /><variable attributes="__instancevar__" citdl="project_name.lower()" line="2939" name="key" /><variable attributes="__instancevar__" citdl="safe_name()" line="2939" name="project_name" /><variable attributes="__instancevar__" citdl="packaging.specifiers.SpecifierSet()" line="2940" name="specifier" /><variable attributes="__instancevar__" line="2943" name="specs" /><variable attributes="__instancevar__" citdl="tuple()" line="2944" name="extras" /><variable attributes="__instancevar__" citdl="tuple" line="2945" name="hashCmp" /><variable attributes="private __instancevar__" citdl="hash()" line="2950" name="__hash" /><scope ilk="function" line="2952" lineend="2956" name="__str__" signature="__str__()"><variable citdl="Requirement" ilk="argument" line="2952" name="self" /><variable citdl="__builtins__.str.join()" line="2953" name="extras" /></scope><scope ilk="function" line="2958" lineend="2961" name="__eq__" returns="bool" signature="__eq__(other)"><variable citdl="Requirement" ilk="argument" line="2958" name="self" /><variable ilk="argument" line="2958" name="other" /></scope><scope ilk="function" line="2964" lineend="2965" name="__ne__" returns="bool" signature="__ne__(other)"><variable citdl="Requirement" ilk="argument" line="2964" name="self" /><variable ilk="argument" line="2964" name="other" /></scope><scope ilk="function" line="2967" lineend="2977" name="__contains__" returns="bool" signature="__contains__(item)"><variable citdl="Requirement" ilk="argument" line="2967" name="self" /><variable citdl="item.version" ilk="argument" line="2967" name="item" /></scope><scope ilk="function" line="2979" lineend="2980" name="__hash__" returns="hash()" signature="__hash__()"><variable citdl="Requirement" ilk="argument" line="2979" name="self" /></scope><scope ilk="function" line="2982" lineend="2982" name="__repr__" signature="__repr__()"><variable citdl="Requirement" ilk="argument" line="2982" name="self" /></scope><scope attributes="__staticmethod__" ilk="function" line="2984" lineend="2984" name="parse" signature="parse(s) - staticmethod"><variable citdl="Requirement" ilk="argument" line="2984" name="s" /><variable citdl="list()" line="2986" name="reqs" /></scope></scope><scope attributes="protected" doc="Get an mro for a type or classic class" ilk="function" line="2994" lineend="2999" name="_get_mro" returns="cls.__mro__" signature="_get_mro(cls)"><variable ilk="argument" line="2994" name="cls" /></scope><scope attributes="protected" doc="Return an adapter factory for `ob` from `registry`" ilk="function" line="3001" lineend="3005" name="_find_adapter" signature="_find_adapter(registry, ob)"><variable ilk="argument" line="3001" name="registry" /><variable ilk="argument" line="3001" name="ob" /><variable line="3003" name="t" /></scope><scope doc="Ensure that the parent directory of `path` exists" ilk="function" line="3008" lineend="3012" name="ensure_directory" signature="ensure_directory(path)"><variable ilk="argument" line="3008" name="path" /><variable citdl="os.path.dirname()" line="3010" name="dirname" /></scope><scope attributes="protected" doc="Sandbox-bypassing version of ensure_directory()" ilk="function" line="3015" lineend="3022" name="_bypass_ensure_directory" signature="_bypass_ensure_directory(path)"><variable ilk="argument" line="3015" name="path" /><variable line="3019" name="filename" /><variable line="3019" name="dirname" /></scope><scope doc="Split a string or iterable thereof into (section, content) pairs&#10;&#10;Each ``section`` is a stripped version of the section header (&quot;[section]&quot;)&#10;and each ``content`` is a list of stripped lines excluding blank lines and&#10;comment-only lines.  If there are any such lines before the first section&#10;header, they're returned in a first ``section`` of ``None``." ilk="function" line="3025" lineend="3048" name="split_sections" signature="split_sections(s)"><variable ilk="argument" line="3025" name="s" /><variable line="3033" name="section" /><variable citdl="list" line="3034" name="content" /><variable line="3035" name="line" /></scope><scope attributes="protected" ilk="function" line="3050" lineend="3058" name="_mkstemp" returns="tempfile.mkstemp()" signature="_mkstemp()"><variable citdl="os.open" line="3051" name="old_open" /></scope><scope attributes="protected" ilk="function" line="3069" lineend="3071" name="_call_aside" signature="_call_aside(**f)"><variable attributes="kwargs" ilk="argument" line="3069" name="f" /></scope><scope attributes="protected" doc="Set up global resource manager (deliberately not state-saved)" ilk="function" line="3074" lineend="3074" name="_initialize" signature="_initialize(g=globals())"><variable citdl="globals()" ilk="argument" line="3074" name="g" /><variable citdl="ResourceManager" line="3077" name="manager" /><variable line="3079" name="name" /></scope><scope attributes="protected" doc="Prepare the master working set and make the ``require()``&#10;API available.&#10;&#10;This function has explicit effects on the global state&#10;of pkg_resources. It is intended to be invoked once at&#10;the initialization of this module.&#10;&#10;Invocation by other packages is unsupported and done&#10;at their own risk." ilk="function" line="3084" lineend="3084" name="_initialize_master_working_set" signature="_initialize_master_working_set()"><variable citdl="WorkingSet._build_master()" line="3097" name="working_set" /><variable citdl="working_set.require" line="3100" name="require" /><variable citdl="working_set.iter_entry_points" line="3101" name="iter_entry_points" /><variable citdl="working_set.subscribe" line="3102" name="add_activation_listener" /><variable citdl="working_set.run_script" line="3103" name="run_script" /><variable citdl="working_set.run_script" line="3105" name="run_main" /></scope></scope>